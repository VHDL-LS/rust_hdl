// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at http://mozilla.org/MPL/2.0/.
//
// Copyright (c) 2019, Olof Kraigher olof.kraigher@gmail.com

// This file is generated by the /vhdl_parser/scripts/generate_visitor.py python script
// and should not be edited manually.

use std::borrow::Borrow;

use crate::ast::*;
use crate::message::Message;
use crate::source::{SrcPos, WithPos};
use crate::symbol_table::Symbol;

#[allow(unused_variables)] // Default implementations for events are empty and do not use any parameters
pub trait Visitor<'a> {
    // ===================================
    // Results
    // -----------------------------------
    fn messages(&self) -> &Vec<Message>;

    // ===================================
    // Source position
    // -----------------------------------
    fn enter_src_pos(&mut self, src_pos: &'a SrcPos) {}
    fn exit_src_pos(&mut self, src_pos: &'a SrcPos) {}

    // ===================================
    // AST events
    // -----------------------------------
    fn enter_symbol(&mut self, node: &Symbol) {}
    fn exit_symbol(&mut self, node: &Symbol) {}
    fn enter_attribute_name(&mut self, node: &AttributeName) {}
    fn exit_attribute_name(&mut self, node: &AttributeName) {}
    fn enter_external_path(&mut self, node: &ExternalPath) {}
    fn exit_external_path(&mut self, node: &ExternalPath) {}
    fn enter_external_name(&mut self, node: &ExternalName) {}
    fn exit_external_name(&mut self, node: &ExternalName) {}
    fn enter_name(&mut self, node: &Name) {}
    fn exit_name(&mut self, node: &Name) {}
    fn enter_selected_name(&mut self, node: &SelectedName) {}
    fn exit_selected_name(&mut self, node: &SelectedName) {}
    fn enter_function_call(&mut self, node: &FunctionCall) {}
    fn exit_function_call(&mut self, node: &FunctionCall) {}
    fn enter_choice(&mut self, node: &Choice) {}
    fn exit_choice(&mut self, node: &Choice) {}
    fn enter_element_association(&mut self, node: &ElementAssociation) {}
    fn exit_element_association(&mut self, node: &ElementAssociation) {}
    fn enter_actual_part(&mut self, node: &ActualPart) {}
    fn exit_actual_part(&mut self, node: &ActualPart) {}
    fn enter_association_element(&mut self, node: &AssociationElement) {}
    fn exit_association_element(&mut self, node: &AssociationElement) {}
    fn enter_abstract_literal(&mut self, node: &AbstractLiteral) {}
    fn exit_abstract_literal(&mut self, node: &AbstractLiteral) {}
    fn enter_bit_string(&mut self, node: &BitString) {}
    fn exit_bit_string(&mut self, node: &BitString) {}
    fn enter_literal(&mut self, node: &Literal) {}
    fn exit_literal(&mut self, node: &Literal) {}
    fn enter_allocator(&mut self, node: &Allocator) {}
    fn exit_allocator(&mut self, node: &Allocator) {}
    fn enter_qualified_expression(&mut self, node: &QualifiedExpression) {}
    fn exit_qualified_expression(&mut self, node: &QualifiedExpression) {}
    fn enter_expression(&mut self, node: &Expression) {}
    fn exit_expression(&mut self, node: &Expression) {}
    fn enter_direction(&mut self, node: &Direction) {}
    fn exit_direction(&mut self, node: &Direction) {}
    fn enter_discrete_range(&mut self, node: &DiscreteRange) {}
    fn exit_discrete_range(&mut self, node: &DiscreteRange) {}
    fn enter_range_constraint(&mut self, node: &RangeConstraint) {}
    fn exit_range_constraint(&mut self, node: &RangeConstraint) {}
    fn enter_range(&mut self, node: &Range) {}
    fn exit_range(&mut self, node: &Range) {}
    fn enter_element_constraint(&mut self, node: &ElementConstraint) {}
    fn exit_element_constraint(&mut self, node: &ElementConstraint) {}
    fn enter_subtype_constraint(&mut self, node: &SubtypeConstraint) {}
    fn exit_subtype_constraint(&mut self, node: &SubtypeConstraint) {}
    fn enter_record_element_resolution(&mut self, node: &RecordElementResolution) {}
    fn exit_record_element_resolution(&mut self, node: &RecordElementResolution) {}
    fn enter_resolution_indication(&mut self, node: &ResolutionIndication) {}
    fn exit_resolution_indication(&mut self, node: &ResolutionIndication) {}
    fn enter_subtype_indication(&mut self, node: &SubtypeIndication) {}
    fn exit_subtype_indication(&mut self, node: &SubtypeIndication) {}
    fn enter_array_index(&mut self, node: &ArrayIndex) {}
    fn exit_array_index(&mut self, node: &ArrayIndex) {}
    fn enter_element_declaration(&mut self, node: &ElementDeclaration) {}
    fn exit_element_declaration(&mut self, node: &ElementDeclaration) {}
    fn enter_protected_type_declarative_item(&mut self, node: &ProtectedTypeDeclarativeItem) {}
    fn exit_protected_type_declarative_item(&mut self, node: &ProtectedTypeDeclarativeItem) {}
    fn enter_designator(&mut self, node: &Designator) {}
    fn exit_designator(&mut self, node: &Designator) {}
    fn enter_alias_declaration(&mut self, node: &AliasDeclaration) {}
    fn exit_alias_declaration(&mut self, node: &AliasDeclaration) {}
    fn enter_attribute_declaration(&mut self, node: &AttributeDeclaration) {}
    fn exit_attribute_declaration(&mut self, node: &AttributeDeclaration) {}
    fn enter_entity_tag(&mut self, node: &EntityTag) {}
    fn exit_entity_tag(&mut self, node: &EntityTag) {}
    fn enter_entity_name(&mut self, node: &EntityName) {}
    fn exit_entity_name(&mut self, node: &EntityName) {}
    fn enter_entity_class(&mut self, node: &EntityClass) {}
    fn exit_entity_class(&mut self, node: &EntityClass) {}
    fn enter_attribute_specification(&mut self, node: &AttributeSpecification) {}
    fn exit_attribute_specification(&mut self, node: &AttributeSpecification) {}
    fn enter_attribute(&mut self, node: &Attribute) {}
    fn exit_attribute(&mut self, node: &Attribute) {}
    fn enter_protected_type_declaration(&mut self, node: &ProtectedTypeDeclaration) {}
    fn exit_protected_type_declaration(&mut self, node: &ProtectedTypeDeclaration) {}
    fn enter_protected_type_body(&mut self, node: &ProtectedTypeBody) {}
    fn exit_protected_type_body(&mut self, node: &ProtectedTypeBody) {}
    fn enter_physical_type_declaration(&mut self, node: &PhysicalTypeDeclaration) {}
    fn exit_physical_type_declaration(&mut self, node: &PhysicalTypeDeclaration) {}
    fn enter_enumeration_literal(&mut self, node: &EnumerationLiteral) {}
    fn exit_enumeration_literal(&mut self, node: &EnumerationLiteral) {}
    fn enter_type_definition(&mut self, node: &TypeDefinition) {}
    fn exit_type_definition(&mut self, node: &TypeDefinition) {}
    fn enter_type_declaration(&mut self, node: &TypeDeclaration) {}
    fn exit_type_declaration(&mut self, node: &TypeDeclaration) {}
    fn enter_object_class(&mut self, node: &ObjectClass) {}
    fn exit_object_class(&mut self, node: &ObjectClass) {}
    fn enter_object_declaration(&mut self, node: &ObjectDeclaration) {}
    fn exit_object_declaration(&mut self, node: &ObjectDeclaration) {}
    fn enter_file_declaration(&mut self, node: &FileDeclaration) {}
    fn exit_file_declaration(&mut self, node: &FileDeclaration) {}
    fn enter_subprogram_designator(&mut self, node: &SubprogramDesignator) {}
    fn exit_subprogram_designator(&mut self, node: &SubprogramDesignator) {}
    fn enter_procedure_specification(&mut self, node: &ProcedureSpecification) {}
    fn exit_procedure_specification(&mut self, node: &ProcedureSpecification) {}
    fn enter_function_specification(&mut self, node: &FunctionSpecification) {}
    fn exit_function_specification(&mut self, node: &FunctionSpecification) {}
    fn enter_subprogram_body(&mut self, node: &SubprogramBody) {}
    fn exit_subprogram_body(&mut self, node: &SubprogramBody) {}
    fn enter_signature(&mut self, node: &Signature) {}
    fn exit_signature(&mut self, node: &Signature) {}
    fn enter_subprogram_declaration(&mut self, node: &SubprogramDeclaration) {}
    fn exit_subprogram_declaration(&mut self, node: &SubprogramDeclaration) {}
    fn enter_interface_file_declaration(&mut self, node: &InterfaceFileDeclaration) {}
    fn exit_interface_file_declaration(&mut self, node: &InterfaceFileDeclaration) {}
    fn enter_interface_object_declaration(&mut self, node: &InterfaceObjectDeclaration) {}
    fn exit_interface_object_declaration(&mut self, node: &InterfaceObjectDeclaration) {}
    fn enter_subprogram_default(&mut self, node: &SubprogramDefault) {}
    fn exit_subprogram_default(&mut self, node: &SubprogramDefault) {}
    fn enter_interface_package_generic_map_aspect(
        &mut self,
        node: &InterfacePackageGenericMapAspect,
    ) {
    }
    fn exit_interface_package_generic_map_aspect(
        &mut self,
        node: &InterfacePackageGenericMapAspect,
    ) {
    }
    fn enter_interface_package_declaration(&mut self, node: &InterfacePackageDeclaration) {}
    fn exit_interface_package_declaration(&mut self, node: &InterfacePackageDeclaration) {}
    fn enter_interface_declaration(&mut self, node: &InterfaceDeclaration) {}
    fn exit_interface_declaration(&mut self, node: &InterfaceDeclaration) {}
    fn enter_mode(&mut self, node: &Mode) {}
    fn exit_mode(&mut self, node: &Mode) {}
    fn enter_port_clause(&mut self, node: &PortClause) {}
    fn exit_port_clause(&mut self, node: &PortClause) {}
    fn enter_component_declaration(&mut self, node: &ComponentDeclaration) {}
    fn exit_component_declaration(&mut self, node: &ComponentDeclaration) {}
    fn enter_declaration(&mut self, node: &Declaration) {}
    fn exit_declaration(&mut self, node: &Declaration) {}
    fn enter_wait_statement(&mut self, node: &WaitStatement) {}
    fn exit_wait_statement(&mut self, node: &WaitStatement) {}
    fn enter_assert_statement(&mut self, node: &AssertStatement) {}
    fn exit_assert_statement(&mut self, node: &AssertStatement) {}
    fn enter_report_statement(&mut self, node: &ReportStatement) {}
    fn exit_report_statement(&mut self, node: &ReportStatement) {}
    fn enter_target(&mut self, node: &Target) {}
    fn exit_target(&mut self, node: &Target) {}
    fn enter_waveform_element(&mut self, node: &WaveformElement) {}
    fn exit_waveform_element(&mut self, node: &WaveformElement) {}
    fn enter_waveform(&mut self, node: &Waveform) {}
    fn exit_waveform(&mut self, node: &Waveform) {}
    fn enter_delay_mechanism(&mut self, node: &DelayMechanism) {}
    fn exit_delay_mechanism(&mut self, node: &DelayMechanism) {}
    fn enter_signal_assignment(&mut self, node: &SignalAssignment) {}
    fn exit_signal_assignment(&mut self, node: &SignalAssignment) {}
    fn enter_variable_assignment(&mut self, node: &VariableAssignment) {}
    fn exit_variable_assignment(&mut self, node: &VariableAssignment) {}
    fn enter_assignment_right_hand_waveform(&mut self, node: &AssignmentRightHand<Waveform>) {}
    fn exit_assignment_right_hand_waveform(&mut self, node: &AssignmentRightHand<Waveform>) {}
    fn enter_assignment_right_hand_with_pos_expression(
        &mut self,
        node: &AssignmentRightHand<WithPos<Expression>>,
    ) {
    }
    fn exit_assignment_right_hand_with_pos_expression(
        &mut self,
        node: &AssignmentRightHand<WithPos<Expression>>,
    ) {
    }
    fn enter_conditional_expression(&mut self, node: &ConditionalExpression) {}
    fn exit_conditional_expression(&mut self, node: &ConditionalExpression) {}
    fn enter_conditional_generate_body(&mut self, node: &Conditional<GenerateBody>) {}
    fn exit_conditional_generate_body(&mut self, node: &Conditional<GenerateBody>) {}
    fn enter_conditional_vec_labeled_sequential_statement(
        &mut self,
        node: &Conditional<Vec<LabeledSequentialStatement>>,
    ) {
    }
    fn exit_conditional_vec_labeled_sequential_statement(
        &mut self,
        node: &Conditional<Vec<LabeledSequentialStatement>>,
    ) {
    }
    fn enter_conditional_waveform(&mut self, node: &Conditional<Waveform>) {}
    fn exit_conditional_waveform(&mut self, node: &Conditional<Waveform>) {}
    fn enter_if_generate_statement(&mut self, node: &IfGenerateStatement) {}
    fn exit_if_generate_statement(&mut self, node: &IfGenerateStatement) {}
    fn enter_if_statement(&mut self, node: &IfStatement) {}
    fn exit_if_statement(&mut self, node: &IfStatement) {}
    fn enter_conditional_expressions(&mut self, node: &ConditionalExpressions) {}
    fn exit_conditional_expressions(&mut self, node: &ConditionalExpressions) {}
    fn enter_conditionals_waveform(&mut self, node: &Conditionals<Waveform>) {}
    fn exit_conditionals_waveform(&mut self, node: &Conditionals<Waveform>) {}
    fn enter_alternative_generate_body(&mut self, node: &Alternative<GenerateBody>) {}
    fn exit_alternative_generate_body(&mut self, node: &Alternative<GenerateBody>) {}
    fn enter_alternative_vec_labeled_sequential_statement(
        &mut self,
        node: &Alternative<Vec<LabeledSequentialStatement>>,
    ) {
    }
    fn exit_alternative_vec_labeled_sequential_statement(
        &mut self,
        node: &Alternative<Vec<LabeledSequentialStatement>>,
    ) {
    }
    fn enter_alternative_waveform(&mut self, node: &Alternative<Waveform>) {}
    fn exit_alternative_waveform(&mut self, node: &Alternative<Waveform>) {}
    fn enter_alternative_with_pos_expression(&mut self, node: &Alternative<WithPos<Expression>>) {}
    fn exit_alternative_with_pos_expression(&mut self, node: &Alternative<WithPos<Expression>>) {}
    fn enter_case_generate_statement(&mut self, node: &CaseGenerateStatement) {}
    fn exit_case_generate_statement(&mut self, node: &CaseGenerateStatement) {}
    fn enter_case_statement(&mut self, node: &CaseStatement) {}
    fn exit_case_statement(&mut self, node: &CaseStatement) {}
    fn enter_selection_waveform(&mut self, node: &Selection<Waveform>) {}
    fn exit_selection_waveform(&mut self, node: &Selection<Waveform>) {}
    fn enter_selection_with_pos_expression(&mut self, node: &Selection<WithPos<Expression>>) {}
    fn exit_selection_with_pos_expression(&mut self, node: &Selection<WithPos<Expression>>) {}
    fn enter_iteration_scheme(&mut self, node: &IterationScheme) {}
    fn exit_iteration_scheme(&mut self, node: &IterationScheme) {}
    fn enter_loop_statement(&mut self, node: &LoopStatement) {}
    fn exit_loop_statement(&mut self, node: &LoopStatement) {}
    fn enter_next_statement(&mut self, node: &NextStatement) {}
    fn exit_next_statement(&mut self, node: &NextStatement) {}
    fn enter_exit_statement(&mut self, node: &ExitStatement) {}
    fn exit_exit_statement(&mut self, node: &ExitStatement) {}
    fn enter_return_statement(&mut self, node: &ReturnStatement) {}
    fn exit_return_statement(&mut self, node: &ReturnStatement) {}
    fn enter_sequential_statement(&mut self, node: &SequentialStatement) {}
    fn exit_sequential_statement(&mut self, node: &SequentialStatement) {}
    fn enter_labeled_sequential_statement(&mut self, node: &LabeledSequentialStatement) {}
    fn exit_labeled_sequential_statement(&mut self, node: &LabeledSequentialStatement) {}
    fn enter_block_statement(&mut self, node: &BlockStatement) {}
    fn exit_block_statement(&mut self, node: &BlockStatement) {}
    fn enter_sensitivity_list(&mut self, node: &SensitivityList) {}
    fn exit_sensitivity_list(&mut self, node: &SensitivityList) {}
    fn enter_process_statement(&mut self, node: &ProcessStatement) {}
    fn exit_process_statement(&mut self, node: &ProcessStatement) {}
    fn enter_concurrent_procedure_call(&mut self, node: &ConcurrentProcedureCall) {}
    fn exit_concurrent_procedure_call(&mut self, node: &ConcurrentProcedureCall) {}
    fn enter_concurrent_assert_statement(&mut self, node: &ConcurrentAssertStatement) {}
    fn exit_concurrent_assert_statement(&mut self, node: &ConcurrentAssertStatement) {}
    fn enter_concurrent_signal_assignment(&mut self, node: &ConcurrentSignalAssignment) {}
    fn exit_concurrent_signal_assignment(&mut self, node: &ConcurrentSignalAssignment) {}
    fn enter_instantiated_unit(&mut self, node: &InstantiatedUnit) {}
    fn exit_instantiated_unit(&mut self, node: &InstantiatedUnit) {}
    fn enter_instantiation_statement(&mut self, node: &InstantiationStatement) {}
    fn exit_instantiation_statement(&mut self, node: &InstantiationStatement) {}
    fn enter_generate_body(&mut self, node: &GenerateBody) {}
    fn exit_generate_body(&mut self, node: &GenerateBody) {}
    fn enter_for_generate_statement(&mut self, node: &ForGenerateStatement) {}
    fn exit_for_generate_statement(&mut self, node: &ForGenerateStatement) {}
    fn enter_concurrent_statement(&mut self, node: &ConcurrentStatement) {}
    fn exit_concurrent_statement(&mut self, node: &ConcurrentStatement) {}
    fn enter_labeled_concurrent_statement(&mut self, node: &LabeledConcurrentStatement) {}
    fn exit_labeled_concurrent_statement(&mut self, node: &LabeledConcurrentStatement) {}
    fn enter_library_clause(&mut self, node: &LibraryClause) {}
    fn exit_library_clause(&mut self, node: &LibraryClause) {}
    fn enter_use_clause(&mut self, node: &UseClause) {}
    fn exit_use_clause(&mut self, node: &UseClause) {}
    fn enter_context_reference(&mut self, node: &ContextReference) {}
    fn exit_context_reference(&mut self, node: &ContextReference) {}
    fn enter_context_item(&mut self, node: &ContextItem) {}
    fn exit_context_item(&mut self, node: &ContextItem) {}
    fn enter_context_declaration(&mut self, node: &ContextDeclaration) {}
    fn exit_context_declaration(&mut self, node: &ContextDeclaration) {}
    fn enter_package_instantiation(&mut self, node: &PackageInstantiation) {}
    fn exit_package_instantiation(&mut self, node: &PackageInstantiation) {}
    fn enter_instantiation_list(&mut self, node: &InstantiationList) {}
    fn exit_instantiation_list(&mut self, node: &InstantiationList) {}
    fn enter_entity_aspect(&mut self, node: &EntityAspect) {}
    fn exit_entity_aspect(&mut self, node: &EntityAspect) {}
    fn enter_binding_indication(&mut self, node: &BindingIndication) {}
    fn exit_binding_indication(&mut self, node: &BindingIndication) {}
    fn enter_component_specification(&mut self, node: &ComponentSpecification) {}
    fn exit_component_specification(&mut self, node: &ComponentSpecification) {}
    fn enter_v_unit_binding_indication(&mut self, node: &VUnitBindingIndication) {}
    fn exit_v_unit_binding_indication(&mut self, node: &VUnitBindingIndication) {}
    fn enter_configuration_specification(&mut self, node: &ConfigurationSpecification) {}
    fn exit_configuration_specification(&mut self, node: &ConfigurationSpecification) {}
    fn enter_configuration_declarative_item(&mut self, node: &ConfigurationDeclarativeItem) {}
    fn exit_configuration_declarative_item(&mut self, node: &ConfigurationDeclarativeItem) {}
    fn enter_component_configuration(&mut self, node: &ComponentConfiguration) {}
    fn exit_component_configuration(&mut self, node: &ComponentConfiguration) {}
    fn enter_configuration_item(&mut self, node: &ConfigurationItem) {}
    fn exit_configuration_item(&mut self, node: &ConfigurationItem) {}
    fn enter_block_configuration(&mut self, node: &BlockConfiguration) {}
    fn exit_block_configuration(&mut self, node: &BlockConfiguration) {}
    fn enter_configuration_declaration(&mut self, node: &ConfigurationDeclaration) {}
    fn exit_configuration_declaration(&mut self, node: &ConfigurationDeclaration) {}
    fn enter_entity_declaration(&mut self, node: &EntityDeclaration) {}
    fn exit_entity_declaration(&mut self, node: &EntityDeclaration) {}
    fn enter_architecture_body(&mut self, node: &ArchitectureBody) {}
    fn exit_architecture_body(&mut self, node: &ArchitectureBody) {}
    fn enter_package_declaration(&mut self, node: &PackageDeclaration) {}
    fn exit_package_declaration(&mut self, node: &PackageDeclaration) {}
    fn enter_package_body(&mut self, node: &PackageBody) {}
    fn exit_package_body(&mut self, node: &PackageBody) {}
    fn enter_primary_unit(&mut self, node: &PrimaryUnit) {}
    fn exit_primary_unit(&mut self, node: &PrimaryUnit) {}
    fn enter_secondary_unit(&mut self, node: &SecondaryUnit) {}
    fn exit_secondary_unit(&mut self, node: &SecondaryUnit) {}
    fn enter_design_unit_entity_declaration(&mut self, node: &DesignUnit<EntityDeclaration>) {}
    fn exit_design_unit_entity_declaration(&mut self, node: &DesignUnit<EntityDeclaration>) {}
    fn enter_design_unit_package_instantiation(&mut self, node: &DesignUnit<PackageInstantiation>) {
    }
    fn exit_design_unit_package_instantiation(&mut self, node: &DesignUnit<PackageInstantiation>) {}
    fn enter_design_unit_configuration_declaration(
        &mut self,
        node: &DesignUnit<ConfigurationDeclaration>,
    ) {
    }
    fn exit_design_unit_configuration_declaration(
        &mut self,
        node: &DesignUnit<ConfigurationDeclaration>,
    ) {
    }
    fn enter_design_unit_package_body(&mut self, node: &DesignUnit<PackageBody>) {}
    fn exit_design_unit_package_body(&mut self, node: &DesignUnit<PackageBody>) {}
    fn enter_design_unit_architecture_body(&mut self, node: &DesignUnit<ArchitectureBody>) {}
    fn exit_design_unit_architecture_body(&mut self, node: &DesignUnit<ArchitectureBody>) {}
    fn enter_design_unit_package_declaration(&mut self, node: &DesignUnit<PackageDeclaration>) {}
    fn exit_design_unit_package_declaration(&mut self, node: &DesignUnit<PackageDeclaration>) {}
    fn enter_any_design_unit(&mut self, node: &AnyDesignUnit) {}
    fn exit_any_design_unit(&mut self, node: &AnyDesignUnit) {}
    fn enter_design_file(&mut self, node: &DesignFile) {}
    fn exit_design_file(&mut self, node: &DesignFile) {}
}

trait Visit<'a> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T);
}

impl<'a, U> Visit<'a> for Vec<U>
where
    U: Visit<'a>,
{
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        for node in self {
            node.visit(visitor);
        }
    }
}

impl<'a, U, V> Visit<'a> for Vec<(U, V)>
where
    U: Visit<'a>,
    V: Visit<'a>,
{
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        for nodes in self {
            nodes.0.visit(visitor);
            nodes.1.visit(visitor);
        }
    }
}

impl<'a, U> Visit<'a> for WithPos<U>
where
    U: Visit<'a>,
{
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        self.item.visit(visitor);
    }
}

impl<'a, U> Visit<'a> for Option<U>
where
    U: Visit<'a>,
{
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        match self {
            Some(node) => node.visit(visitor),
            None => (),
        }
    }
}

impl<'a, U> Visit<'a> for Box<U>
where
    U: Visit<'a>,
{
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        let node: &U = self.borrow();
        node.visit(visitor);
    }
}

pub struct AstVisitor<'a> {
    messages: Vec<Message>,
    visitors: Vec<Box<&'a mut Visitor<'a>>>,
    src_pos: Option<&'a SrcPos>,
}

impl<'a> AstVisitor<'a> {
    pub fn new() -> Self {
        AstVisitor {
            messages: Vec::new(),
            visitors: Vec::new(),
            src_pos: None,
        }
    }
    pub fn register<T: Visitor<'a>>(&mut self, visitor: &'a mut T) {
        self.visitors.push(Box::new(visitor));
    }
}

impl<'a> Visitor<'a> for AstVisitor<'a> {
    // ===================================
    // Results
    // -----------------------------------
    fn messages(&self) -> &Vec<Message> {
        &self.messages
    }

    // ===================================
    // Source position
    // -----------------------------------
    fn enter_src_pos(&mut self, src_pos: &'a SrcPos) {
        self.src_pos = Some(src_pos);
    }
    fn exit_src_pos(&mut self, src_pos: &'a SrcPos) {
        self.src_pos = Some(src_pos);
    }

    // ===================================
    // AST events
    // -----------------------------------
    fn enter_symbol(&mut self, node: &Symbol) {
        for visitor in &mut self.visitors {
            visitor.enter_symbol(node);
        }
    }
    fn exit_symbol(&mut self, node: &Symbol) {
        for visitor in &mut self.visitors {
            visitor.exit_symbol(node);
        }
    }
    fn enter_attribute_name(&mut self, node: &AttributeName) {
        for visitor in &mut self.visitors {
            visitor.enter_attribute_name(node);
        }
    }
    fn exit_attribute_name(&mut self, node: &AttributeName) {
        for visitor in &mut self.visitors {
            visitor.exit_attribute_name(node);
        }
    }
    fn enter_external_path(&mut self, node: &ExternalPath) {
        for visitor in &mut self.visitors {
            visitor.enter_external_path(node);
        }
    }
    fn exit_external_path(&mut self, node: &ExternalPath) {
        for visitor in &mut self.visitors {
            visitor.exit_external_path(node);
        }
    }
    fn enter_external_name(&mut self, node: &ExternalName) {
        for visitor in &mut self.visitors {
            visitor.enter_external_name(node);
        }
    }
    fn exit_external_name(&mut self, node: &ExternalName) {
        for visitor in &mut self.visitors {
            visitor.exit_external_name(node);
        }
    }
    fn enter_name(&mut self, node: &Name) {
        for visitor in &mut self.visitors {
            visitor.enter_name(node);
        }
    }
    fn exit_name(&mut self, node: &Name) {
        for visitor in &mut self.visitors {
            visitor.exit_name(node);
        }
    }
    fn enter_selected_name(&mut self, node: &SelectedName) {
        for visitor in &mut self.visitors {
            visitor.enter_selected_name(node);
        }
    }
    fn exit_selected_name(&mut self, node: &SelectedName) {
        for visitor in &mut self.visitors {
            visitor.exit_selected_name(node);
        }
    }
    fn enter_function_call(&mut self, node: &FunctionCall) {
        for visitor in &mut self.visitors {
            visitor.enter_function_call(node);
        }
    }
    fn exit_function_call(&mut self, node: &FunctionCall) {
        for visitor in &mut self.visitors {
            visitor.exit_function_call(node);
        }
    }
    fn enter_choice(&mut self, node: &Choice) {
        for visitor in &mut self.visitors {
            visitor.enter_choice(node);
        }
    }
    fn exit_choice(&mut self, node: &Choice) {
        for visitor in &mut self.visitors {
            visitor.exit_choice(node);
        }
    }
    fn enter_element_association(&mut self, node: &ElementAssociation) {
        for visitor in &mut self.visitors {
            visitor.enter_element_association(node);
        }
    }
    fn exit_element_association(&mut self, node: &ElementAssociation) {
        for visitor in &mut self.visitors {
            visitor.exit_element_association(node);
        }
    }
    fn enter_actual_part(&mut self, node: &ActualPart) {
        for visitor in &mut self.visitors {
            visitor.enter_actual_part(node);
        }
    }
    fn exit_actual_part(&mut self, node: &ActualPart) {
        for visitor in &mut self.visitors {
            visitor.exit_actual_part(node);
        }
    }
    fn enter_association_element(&mut self, node: &AssociationElement) {
        for visitor in &mut self.visitors {
            visitor.enter_association_element(node);
        }
    }
    fn exit_association_element(&mut self, node: &AssociationElement) {
        for visitor in &mut self.visitors {
            visitor.exit_association_element(node);
        }
    }
    fn enter_abstract_literal(&mut self, node: &AbstractLiteral) {
        for visitor in &mut self.visitors {
            visitor.enter_abstract_literal(node);
        }
    }
    fn exit_abstract_literal(&mut self, node: &AbstractLiteral) {
        for visitor in &mut self.visitors {
            visitor.exit_abstract_literal(node);
        }
    }
    fn enter_bit_string(&mut self, node: &BitString) {
        for visitor in &mut self.visitors {
            visitor.enter_bit_string(node);
        }
    }
    fn exit_bit_string(&mut self, node: &BitString) {
        for visitor in &mut self.visitors {
            visitor.exit_bit_string(node);
        }
    }
    fn enter_literal(&mut self, node: &Literal) {
        for visitor in &mut self.visitors {
            visitor.enter_literal(node);
        }
    }
    fn exit_literal(&mut self, node: &Literal) {
        for visitor in &mut self.visitors {
            visitor.exit_literal(node);
        }
    }
    fn enter_allocator(&mut self, node: &Allocator) {
        for visitor in &mut self.visitors {
            visitor.enter_allocator(node);
        }
    }
    fn exit_allocator(&mut self, node: &Allocator) {
        for visitor in &mut self.visitors {
            visitor.exit_allocator(node);
        }
    }
    fn enter_qualified_expression(&mut self, node: &QualifiedExpression) {
        for visitor in &mut self.visitors {
            visitor.enter_qualified_expression(node);
        }
    }
    fn exit_qualified_expression(&mut self, node: &QualifiedExpression) {
        for visitor in &mut self.visitors {
            visitor.exit_qualified_expression(node);
        }
    }
    fn enter_expression(&mut self, node: &Expression) {
        for visitor in &mut self.visitors {
            visitor.enter_expression(node);
        }
    }
    fn exit_expression(&mut self, node: &Expression) {
        for visitor in &mut self.visitors {
            visitor.exit_expression(node);
        }
    }
    fn enter_direction(&mut self, node: &Direction) {
        for visitor in &mut self.visitors {
            visitor.enter_direction(node);
        }
    }
    fn exit_direction(&mut self, node: &Direction) {
        for visitor in &mut self.visitors {
            visitor.exit_direction(node);
        }
    }
    fn enter_discrete_range(&mut self, node: &DiscreteRange) {
        for visitor in &mut self.visitors {
            visitor.enter_discrete_range(node);
        }
    }
    fn exit_discrete_range(&mut self, node: &DiscreteRange) {
        for visitor in &mut self.visitors {
            visitor.exit_discrete_range(node);
        }
    }
    fn enter_range_constraint(&mut self, node: &RangeConstraint) {
        for visitor in &mut self.visitors {
            visitor.enter_range_constraint(node);
        }
    }
    fn exit_range_constraint(&mut self, node: &RangeConstraint) {
        for visitor in &mut self.visitors {
            visitor.exit_range_constraint(node);
        }
    }
    fn enter_range(&mut self, node: &Range) {
        for visitor in &mut self.visitors {
            visitor.enter_range(node);
        }
    }
    fn exit_range(&mut self, node: &Range) {
        for visitor in &mut self.visitors {
            visitor.exit_range(node);
        }
    }
    fn enter_element_constraint(&mut self, node: &ElementConstraint) {
        for visitor in &mut self.visitors {
            visitor.enter_element_constraint(node);
        }
    }
    fn exit_element_constraint(&mut self, node: &ElementConstraint) {
        for visitor in &mut self.visitors {
            visitor.exit_element_constraint(node);
        }
    }
    fn enter_subtype_constraint(&mut self, node: &SubtypeConstraint) {
        for visitor in &mut self.visitors {
            visitor.enter_subtype_constraint(node);
        }
    }
    fn exit_subtype_constraint(&mut self, node: &SubtypeConstraint) {
        for visitor in &mut self.visitors {
            visitor.exit_subtype_constraint(node);
        }
    }
    fn enter_record_element_resolution(&mut self, node: &RecordElementResolution) {
        for visitor in &mut self.visitors {
            visitor.enter_record_element_resolution(node);
        }
    }
    fn exit_record_element_resolution(&mut self, node: &RecordElementResolution) {
        for visitor in &mut self.visitors {
            visitor.exit_record_element_resolution(node);
        }
    }
    fn enter_resolution_indication(&mut self, node: &ResolutionIndication) {
        for visitor in &mut self.visitors {
            visitor.enter_resolution_indication(node);
        }
    }
    fn exit_resolution_indication(&mut self, node: &ResolutionIndication) {
        for visitor in &mut self.visitors {
            visitor.exit_resolution_indication(node);
        }
    }
    fn enter_subtype_indication(&mut self, node: &SubtypeIndication) {
        for visitor in &mut self.visitors {
            visitor.enter_subtype_indication(node);
        }
    }
    fn exit_subtype_indication(&mut self, node: &SubtypeIndication) {
        for visitor in &mut self.visitors {
            visitor.exit_subtype_indication(node);
        }
    }
    fn enter_array_index(&mut self, node: &ArrayIndex) {
        for visitor in &mut self.visitors {
            visitor.enter_array_index(node);
        }
    }
    fn exit_array_index(&mut self, node: &ArrayIndex) {
        for visitor in &mut self.visitors {
            visitor.exit_array_index(node);
        }
    }
    fn enter_element_declaration(&mut self, node: &ElementDeclaration) {
        for visitor in &mut self.visitors {
            visitor.enter_element_declaration(node);
        }
    }
    fn exit_element_declaration(&mut self, node: &ElementDeclaration) {
        for visitor in &mut self.visitors {
            visitor.exit_element_declaration(node);
        }
    }
    fn enter_protected_type_declarative_item(&mut self, node: &ProtectedTypeDeclarativeItem) {
        for visitor in &mut self.visitors {
            visitor.enter_protected_type_declarative_item(node);
        }
    }
    fn exit_protected_type_declarative_item(&mut self, node: &ProtectedTypeDeclarativeItem) {
        for visitor in &mut self.visitors {
            visitor.exit_protected_type_declarative_item(node);
        }
    }
    fn enter_designator(&mut self, node: &Designator) {
        for visitor in &mut self.visitors {
            visitor.enter_designator(node);
        }
    }
    fn exit_designator(&mut self, node: &Designator) {
        for visitor in &mut self.visitors {
            visitor.exit_designator(node);
        }
    }
    fn enter_alias_declaration(&mut self, node: &AliasDeclaration) {
        for visitor in &mut self.visitors {
            visitor.enter_alias_declaration(node);
        }
    }
    fn exit_alias_declaration(&mut self, node: &AliasDeclaration) {
        for visitor in &mut self.visitors {
            visitor.exit_alias_declaration(node);
        }
    }
    fn enter_attribute_declaration(&mut self, node: &AttributeDeclaration) {
        for visitor in &mut self.visitors {
            visitor.enter_attribute_declaration(node);
        }
    }
    fn exit_attribute_declaration(&mut self, node: &AttributeDeclaration) {
        for visitor in &mut self.visitors {
            visitor.exit_attribute_declaration(node);
        }
    }
    fn enter_entity_tag(&mut self, node: &EntityTag) {
        for visitor in &mut self.visitors {
            visitor.enter_entity_tag(node);
        }
    }
    fn exit_entity_tag(&mut self, node: &EntityTag) {
        for visitor in &mut self.visitors {
            visitor.exit_entity_tag(node);
        }
    }
    fn enter_entity_name(&mut self, node: &EntityName) {
        for visitor in &mut self.visitors {
            visitor.enter_entity_name(node);
        }
    }
    fn exit_entity_name(&mut self, node: &EntityName) {
        for visitor in &mut self.visitors {
            visitor.exit_entity_name(node);
        }
    }
    fn enter_entity_class(&mut self, node: &EntityClass) {
        for visitor in &mut self.visitors {
            visitor.enter_entity_class(node);
        }
    }
    fn exit_entity_class(&mut self, node: &EntityClass) {
        for visitor in &mut self.visitors {
            visitor.exit_entity_class(node);
        }
    }
    fn enter_attribute_specification(&mut self, node: &AttributeSpecification) {
        for visitor in &mut self.visitors {
            visitor.enter_attribute_specification(node);
        }
    }
    fn exit_attribute_specification(&mut self, node: &AttributeSpecification) {
        for visitor in &mut self.visitors {
            visitor.exit_attribute_specification(node);
        }
    }
    fn enter_attribute(&mut self, node: &Attribute) {
        for visitor in &mut self.visitors {
            visitor.enter_attribute(node);
        }
    }
    fn exit_attribute(&mut self, node: &Attribute) {
        for visitor in &mut self.visitors {
            visitor.exit_attribute(node);
        }
    }
    fn enter_protected_type_declaration(&mut self, node: &ProtectedTypeDeclaration) {
        for visitor in &mut self.visitors {
            visitor.enter_protected_type_declaration(node);
        }
    }
    fn exit_protected_type_declaration(&mut self, node: &ProtectedTypeDeclaration) {
        for visitor in &mut self.visitors {
            visitor.exit_protected_type_declaration(node);
        }
    }
    fn enter_protected_type_body(&mut self, node: &ProtectedTypeBody) {
        for visitor in &mut self.visitors {
            visitor.enter_protected_type_body(node);
        }
    }
    fn exit_protected_type_body(&mut self, node: &ProtectedTypeBody) {
        for visitor in &mut self.visitors {
            visitor.exit_protected_type_body(node);
        }
    }
    fn enter_physical_type_declaration(&mut self, node: &PhysicalTypeDeclaration) {
        for visitor in &mut self.visitors {
            visitor.enter_physical_type_declaration(node);
        }
    }
    fn exit_physical_type_declaration(&mut self, node: &PhysicalTypeDeclaration) {
        for visitor in &mut self.visitors {
            visitor.exit_physical_type_declaration(node);
        }
    }
    fn enter_enumeration_literal(&mut self, node: &EnumerationLiteral) {
        for visitor in &mut self.visitors {
            visitor.enter_enumeration_literal(node);
        }
    }
    fn exit_enumeration_literal(&mut self, node: &EnumerationLiteral) {
        for visitor in &mut self.visitors {
            visitor.exit_enumeration_literal(node);
        }
    }
    fn enter_type_definition(&mut self, node: &TypeDefinition) {
        for visitor in &mut self.visitors {
            visitor.enter_type_definition(node);
        }
    }
    fn exit_type_definition(&mut self, node: &TypeDefinition) {
        for visitor in &mut self.visitors {
            visitor.exit_type_definition(node);
        }
    }
    fn enter_type_declaration(&mut self, node: &TypeDeclaration) {
        for visitor in &mut self.visitors {
            visitor.enter_type_declaration(node);
        }
    }
    fn exit_type_declaration(&mut self, node: &TypeDeclaration) {
        for visitor in &mut self.visitors {
            visitor.exit_type_declaration(node);
        }
    }
    fn enter_object_class(&mut self, node: &ObjectClass) {
        for visitor in &mut self.visitors {
            visitor.enter_object_class(node);
        }
    }
    fn exit_object_class(&mut self, node: &ObjectClass) {
        for visitor in &mut self.visitors {
            visitor.exit_object_class(node);
        }
    }
    fn enter_object_declaration(&mut self, node: &ObjectDeclaration) {
        for visitor in &mut self.visitors {
            visitor.enter_object_declaration(node);
        }
    }
    fn exit_object_declaration(&mut self, node: &ObjectDeclaration) {
        for visitor in &mut self.visitors {
            visitor.exit_object_declaration(node);
        }
    }
    fn enter_file_declaration(&mut self, node: &FileDeclaration) {
        for visitor in &mut self.visitors {
            visitor.enter_file_declaration(node);
        }
    }
    fn exit_file_declaration(&mut self, node: &FileDeclaration) {
        for visitor in &mut self.visitors {
            visitor.exit_file_declaration(node);
        }
    }
    fn enter_subprogram_designator(&mut self, node: &SubprogramDesignator) {
        for visitor in &mut self.visitors {
            visitor.enter_subprogram_designator(node);
        }
    }
    fn exit_subprogram_designator(&mut self, node: &SubprogramDesignator) {
        for visitor in &mut self.visitors {
            visitor.exit_subprogram_designator(node);
        }
    }
    fn enter_procedure_specification(&mut self, node: &ProcedureSpecification) {
        for visitor in &mut self.visitors {
            visitor.enter_procedure_specification(node);
        }
    }
    fn exit_procedure_specification(&mut self, node: &ProcedureSpecification) {
        for visitor in &mut self.visitors {
            visitor.exit_procedure_specification(node);
        }
    }
    fn enter_function_specification(&mut self, node: &FunctionSpecification) {
        for visitor in &mut self.visitors {
            visitor.enter_function_specification(node);
        }
    }
    fn exit_function_specification(&mut self, node: &FunctionSpecification) {
        for visitor in &mut self.visitors {
            visitor.exit_function_specification(node);
        }
    }
    fn enter_subprogram_body(&mut self, node: &SubprogramBody) {
        for visitor in &mut self.visitors {
            visitor.enter_subprogram_body(node);
        }
    }
    fn exit_subprogram_body(&mut self, node: &SubprogramBody) {
        for visitor in &mut self.visitors {
            visitor.exit_subprogram_body(node);
        }
    }
    fn enter_signature(&mut self, node: &Signature) {
        for visitor in &mut self.visitors {
            visitor.enter_signature(node);
        }
    }
    fn exit_signature(&mut self, node: &Signature) {
        for visitor in &mut self.visitors {
            visitor.exit_signature(node);
        }
    }
    fn enter_subprogram_declaration(&mut self, node: &SubprogramDeclaration) {
        for visitor in &mut self.visitors {
            visitor.enter_subprogram_declaration(node);
        }
    }
    fn exit_subprogram_declaration(&mut self, node: &SubprogramDeclaration) {
        for visitor in &mut self.visitors {
            visitor.exit_subprogram_declaration(node);
        }
    }
    fn enter_interface_file_declaration(&mut self, node: &InterfaceFileDeclaration) {
        for visitor in &mut self.visitors {
            visitor.enter_interface_file_declaration(node);
        }
    }
    fn exit_interface_file_declaration(&mut self, node: &InterfaceFileDeclaration) {
        for visitor in &mut self.visitors {
            visitor.exit_interface_file_declaration(node);
        }
    }
    fn enter_interface_object_declaration(&mut self, node: &InterfaceObjectDeclaration) {
        for visitor in &mut self.visitors {
            visitor.enter_interface_object_declaration(node);
        }
    }
    fn exit_interface_object_declaration(&mut self, node: &InterfaceObjectDeclaration) {
        for visitor in &mut self.visitors {
            visitor.exit_interface_object_declaration(node);
        }
    }
    fn enter_subprogram_default(&mut self, node: &SubprogramDefault) {
        for visitor in &mut self.visitors {
            visitor.enter_subprogram_default(node);
        }
    }
    fn exit_subprogram_default(&mut self, node: &SubprogramDefault) {
        for visitor in &mut self.visitors {
            visitor.exit_subprogram_default(node);
        }
    }
    fn enter_interface_package_generic_map_aspect(
        &mut self,
        node: &InterfacePackageGenericMapAspect,
    ) {
        for visitor in &mut self.visitors {
            visitor.enter_interface_package_generic_map_aspect(node);
        }
    }
    fn exit_interface_package_generic_map_aspect(
        &mut self,
        node: &InterfacePackageGenericMapAspect,
    ) {
        for visitor in &mut self.visitors {
            visitor.exit_interface_package_generic_map_aspect(node);
        }
    }
    fn enter_interface_package_declaration(&mut self, node: &InterfacePackageDeclaration) {
        for visitor in &mut self.visitors {
            visitor.enter_interface_package_declaration(node);
        }
    }
    fn exit_interface_package_declaration(&mut self, node: &InterfacePackageDeclaration) {
        for visitor in &mut self.visitors {
            visitor.exit_interface_package_declaration(node);
        }
    }
    fn enter_interface_declaration(&mut self, node: &InterfaceDeclaration) {
        for visitor in &mut self.visitors {
            visitor.enter_interface_declaration(node);
        }
    }
    fn exit_interface_declaration(&mut self, node: &InterfaceDeclaration) {
        for visitor in &mut self.visitors {
            visitor.exit_interface_declaration(node);
        }
    }
    fn enter_mode(&mut self, node: &Mode) {
        for visitor in &mut self.visitors {
            visitor.enter_mode(node);
        }
    }
    fn exit_mode(&mut self, node: &Mode) {
        for visitor in &mut self.visitors {
            visitor.exit_mode(node);
        }
    }
    fn enter_port_clause(&mut self, node: &PortClause) {
        for visitor in &mut self.visitors {
            visitor.enter_port_clause(node);
        }
    }
    fn exit_port_clause(&mut self, node: &PortClause) {
        for visitor in &mut self.visitors {
            visitor.exit_port_clause(node);
        }
    }
    fn enter_component_declaration(&mut self, node: &ComponentDeclaration) {
        for visitor in &mut self.visitors {
            visitor.enter_component_declaration(node);
        }
    }
    fn exit_component_declaration(&mut self, node: &ComponentDeclaration) {
        for visitor in &mut self.visitors {
            visitor.exit_component_declaration(node);
        }
    }
    fn enter_declaration(&mut self, node: &Declaration) {
        for visitor in &mut self.visitors {
            visitor.enter_declaration(node);
        }
    }
    fn exit_declaration(&mut self, node: &Declaration) {
        for visitor in &mut self.visitors {
            visitor.exit_declaration(node);
        }
    }
    fn enter_wait_statement(&mut self, node: &WaitStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_wait_statement(node);
        }
    }
    fn exit_wait_statement(&mut self, node: &WaitStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_wait_statement(node);
        }
    }
    fn enter_assert_statement(&mut self, node: &AssertStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_assert_statement(node);
        }
    }
    fn exit_assert_statement(&mut self, node: &AssertStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_assert_statement(node);
        }
    }
    fn enter_report_statement(&mut self, node: &ReportStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_report_statement(node);
        }
    }
    fn exit_report_statement(&mut self, node: &ReportStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_report_statement(node);
        }
    }
    fn enter_target(&mut self, node: &Target) {
        for visitor in &mut self.visitors {
            visitor.enter_target(node);
        }
    }
    fn exit_target(&mut self, node: &Target) {
        for visitor in &mut self.visitors {
            visitor.exit_target(node);
        }
    }
    fn enter_waveform_element(&mut self, node: &WaveformElement) {
        for visitor in &mut self.visitors {
            visitor.enter_waveform_element(node);
        }
    }
    fn exit_waveform_element(&mut self, node: &WaveformElement) {
        for visitor in &mut self.visitors {
            visitor.exit_waveform_element(node);
        }
    }
    fn enter_waveform(&mut self, node: &Waveform) {
        for visitor in &mut self.visitors {
            visitor.enter_waveform(node);
        }
    }
    fn exit_waveform(&mut self, node: &Waveform) {
        for visitor in &mut self.visitors {
            visitor.exit_waveform(node);
        }
    }
    fn enter_delay_mechanism(&mut self, node: &DelayMechanism) {
        for visitor in &mut self.visitors {
            visitor.enter_delay_mechanism(node);
        }
    }
    fn exit_delay_mechanism(&mut self, node: &DelayMechanism) {
        for visitor in &mut self.visitors {
            visitor.exit_delay_mechanism(node);
        }
    }
    fn enter_signal_assignment(&mut self, node: &SignalAssignment) {
        for visitor in &mut self.visitors {
            visitor.enter_signal_assignment(node);
        }
    }
    fn exit_signal_assignment(&mut self, node: &SignalAssignment) {
        for visitor in &mut self.visitors {
            visitor.exit_signal_assignment(node);
        }
    }
    fn enter_variable_assignment(&mut self, node: &VariableAssignment) {
        for visitor in &mut self.visitors {
            visitor.enter_variable_assignment(node);
        }
    }
    fn exit_variable_assignment(&mut self, node: &VariableAssignment) {
        for visitor in &mut self.visitors {
            visitor.exit_variable_assignment(node);
        }
    }
    fn enter_assignment_right_hand_waveform(&mut self, node: &AssignmentRightHand<Waveform>) {
        for visitor in &mut self.visitors {
            visitor.enter_assignment_right_hand_waveform(node);
        }
    }
    fn exit_assignment_right_hand_waveform(&mut self, node: &AssignmentRightHand<Waveform>) {
        for visitor in &mut self.visitors {
            visitor.exit_assignment_right_hand_waveform(node);
        }
    }
    fn enter_assignment_right_hand_with_pos_expression(
        &mut self,
        node: &AssignmentRightHand<WithPos<Expression>>,
    ) {
        for visitor in &mut self.visitors {
            visitor.enter_assignment_right_hand_with_pos_expression(node);
        }
    }
    fn exit_assignment_right_hand_with_pos_expression(
        &mut self,
        node: &AssignmentRightHand<WithPos<Expression>>,
    ) {
        for visitor in &mut self.visitors {
            visitor.exit_assignment_right_hand_with_pos_expression(node);
        }
    }
    fn enter_conditional_expression(&mut self, node: &ConditionalExpression) {
        for visitor in &mut self.visitors {
            visitor.enter_conditional_expression(node);
        }
    }
    fn exit_conditional_expression(&mut self, node: &ConditionalExpression) {
        for visitor in &mut self.visitors {
            visitor.exit_conditional_expression(node);
        }
    }
    fn enter_conditional_generate_body(&mut self, node: &Conditional<GenerateBody>) {
        for visitor in &mut self.visitors {
            visitor.enter_conditional_generate_body(node);
        }
    }
    fn exit_conditional_generate_body(&mut self, node: &Conditional<GenerateBody>) {
        for visitor in &mut self.visitors {
            visitor.exit_conditional_generate_body(node);
        }
    }
    fn enter_conditional_vec_labeled_sequential_statement(
        &mut self,
        node: &Conditional<Vec<LabeledSequentialStatement>>,
    ) {
        for visitor in &mut self.visitors {
            visitor.enter_conditional_vec_labeled_sequential_statement(node);
        }
    }
    fn exit_conditional_vec_labeled_sequential_statement(
        &mut self,
        node: &Conditional<Vec<LabeledSequentialStatement>>,
    ) {
        for visitor in &mut self.visitors {
            visitor.exit_conditional_vec_labeled_sequential_statement(node);
        }
    }
    fn enter_conditional_waveform(&mut self, node: &Conditional<Waveform>) {
        for visitor in &mut self.visitors {
            visitor.enter_conditional_waveform(node);
        }
    }
    fn exit_conditional_waveform(&mut self, node: &Conditional<Waveform>) {
        for visitor in &mut self.visitors {
            visitor.exit_conditional_waveform(node);
        }
    }
    fn enter_if_generate_statement(&mut self, node: &IfGenerateStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_if_generate_statement(node);
        }
    }
    fn exit_if_generate_statement(&mut self, node: &IfGenerateStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_if_generate_statement(node);
        }
    }
    fn enter_if_statement(&mut self, node: &IfStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_if_statement(node);
        }
    }
    fn exit_if_statement(&mut self, node: &IfStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_if_statement(node);
        }
    }
    fn enter_conditional_expressions(&mut self, node: &ConditionalExpressions) {
        for visitor in &mut self.visitors {
            visitor.enter_conditional_expressions(node);
        }
    }
    fn exit_conditional_expressions(&mut self, node: &ConditionalExpressions) {
        for visitor in &mut self.visitors {
            visitor.exit_conditional_expressions(node);
        }
    }
    fn enter_conditionals_waveform(&mut self, node: &Conditionals<Waveform>) {
        for visitor in &mut self.visitors {
            visitor.enter_conditionals_waveform(node);
        }
    }
    fn exit_conditionals_waveform(&mut self, node: &Conditionals<Waveform>) {
        for visitor in &mut self.visitors {
            visitor.exit_conditionals_waveform(node);
        }
    }
    fn enter_alternative_generate_body(&mut self, node: &Alternative<GenerateBody>) {
        for visitor in &mut self.visitors {
            visitor.enter_alternative_generate_body(node);
        }
    }
    fn exit_alternative_generate_body(&mut self, node: &Alternative<GenerateBody>) {
        for visitor in &mut self.visitors {
            visitor.exit_alternative_generate_body(node);
        }
    }
    fn enter_alternative_vec_labeled_sequential_statement(
        &mut self,
        node: &Alternative<Vec<LabeledSequentialStatement>>,
    ) {
        for visitor in &mut self.visitors {
            visitor.enter_alternative_vec_labeled_sequential_statement(node);
        }
    }
    fn exit_alternative_vec_labeled_sequential_statement(
        &mut self,
        node: &Alternative<Vec<LabeledSequentialStatement>>,
    ) {
        for visitor in &mut self.visitors {
            visitor.exit_alternative_vec_labeled_sequential_statement(node);
        }
    }
    fn enter_alternative_waveform(&mut self, node: &Alternative<Waveform>) {
        for visitor in &mut self.visitors {
            visitor.enter_alternative_waveform(node);
        }
    }
    fn exit_alternative_waveform(&mut self, node: &Alternative<Waveform>) {
        for visitor in &mut self.visitors {
            visitor.exit_alternative_waveform(node);
        }
    }
    fn enter_alternative_with_pos_expression(&mut self, node: &Alternative<WithPos<Expression>>) {
        for visitor in &mut self.visitors {
            visitor.enter_alternative_with_pos_expression(node);
        }
    }
    fn exit_alternative_with_pos_expression(&mut self, node: &Alternative<WithPos<Expression>>) {
        for visitor in &mut self.visitors {
            visitor.exit_alternative_with_pos_expression(node);
        }
    }
    fn enter_case_generate_statement(&mut self, node: &CaseGenerateStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_case_generate_statement(node);
        }
    }
    fn exit_case_generate_statement(&mut self, node: &CaseGenerateStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_case_generate_statement(node);
        }
    }
    fn enter_case_statement(&mut self, node: &CaseStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_case_statement(node);
        }
    }
    fn exit_case_statement(&mut self, node: &CaseStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_case_statement(node);
        }
    }
    fn enter_selection_waveform(&mut self, node: &Selection<Waveform>) {
        for visitor in &mut self.visitors {
            visitor.enter_selection_waveform(node);
        }
    }
    fn exit_selection_waveform(&mut self, node: &Selection<Waveform>) {
        for visitor in &mut self.visitors {
            visitor.exit_selection_waveform(node);
        }
    }
    fn enter_selection_with_pos_expression(&mut self, node: &Selection<WithPos<Expression>>) {
        for visitor in &mut self.visitors {
            visitor.enter_selection_with_pos_expression(node);
        }
    }
    fn exit_selection_with_pos_expression(&mut self, node: &Selection<WithPos<Expression>>) {
        for visitor in &mut self.visitors {
            visitor.exit_selection_with_pos_expression(node);
        }
    }
    fn enter_iteration_scheme(&mut self, node: &IterationScheme) {
        for visitor in &mut self.visitors {
            visitor.enter_iteration_scheme(node);
        }
    }
    fn exit_iteration_scheme(&mut self, node: &IterationScheme) {
        for visitor in &mut self.visitors {
            visitor.exit_iteration_scheme(node);
        }
    }
    fn enter_loop_statement(&mut self, node: &LoopStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_loop_statement(node);
        }
    }
    fn exit_loop_statement(&mut self, node: &LoopStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_loop_statement(node);
        }
    }
    fn enter_next_statement(&mut self, node: &NextStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_next_statement(node);
        }
    }
    fn exit_next_statement(&mut self, node: &NextStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_next_statement(node);
        }
    }
    fn enter_exit_statement(&mut self, node: &ExitStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_exit_statement(node);
        }
    }
    fn exit_exit_statement(&mut self, node: &ExitStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_exit_statement(node);
        }
    }
    fn enter_return_statement(&mut self, node: &ReturnStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_return_statement(node);
        }
    }
    fn exit_return_statement(&mut self, node: &ReturnStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_return_statement(node);
        }
    }
    fn enter_sequential_statement(&mut self, node: &SequentialStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_sequential_statement(node);
        }
    }
    fn exit_sequential_statement(&mut self, node: &SequentialStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_sequential_statement(node);
        }
    }
    fn enter_labeled_sequential_statement(&mut self, node: &LabeledSequentialStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_labeled_sequential_statement(node);
        }
    }
    fn exit_labeled_sequential_statement(&mut self, node: &LabeledSequentialStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_labeled_sequential_statement(node);
        }
    }
    fn enter_block_statement(&mut self, node: &BlockStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_block_statement(node);
        }
    }
    fn exit_block_statement(&mut self, node: &BlockStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_block_statement(node);
        }
    }
    fn enter_sensitivity_list(&mut self, node: &SensitivityList) {
        for visitor in &mut self.visitors {
            visitor.enter_sensitivity_list(node);
        }
    }
    fn exit_sensitivity_list(&mut self, node: &SensitivityList) {
        for visitor in &mut self.visitors {
            visitor.exit_sensitivity_list(node);
        }
    }
    fn enter_process_statement(&mut self, node: &ProcessStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_process_statement(node);
        }
    }
    fn exit_process_statement(&mut self, node: &ProcessStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_process_statement(node);
        }
    }
    fn enter_concurrent_procedure_call(&mut self, node: &ConcurrentProcedureCall) {
        for visitor in &mut self.visitors {
            visitor.enter_concurrent_procedure_call(node);
        }
    }
    fn exit_concurrent_procedure_call(&mut self, node: &ConcurrentProcedureCall) {
        for visitor in &mut self.visitors {
            visitor.exit_concurrent_procedure_call(node);
        }
    }
    fn enter_concurrent_assert_statement(&mut self, node: &ConcurrentAssertStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_concurrent_assert_statement(node);
        }
    }
    fn exit_concurrent_assert_statement(&mut self, node: &ConcurrentAssertStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_concurrent_assert_statement(node);
        }
    }
    fn enter_concurrent_signal_assignment(&mut self, node: &ConcurrentSignalAssignment) {
        for visitor in &mut self.visitors {
            visitor.enter_concurrent_signal_assignment(node);
        }
    }
    fn exit_concurrent_signal_assignment(&mut self, node: &ConcurrentSignalAssignment) {
        for visitor in &mut self.visitors {
            visitor.exit_concurrent_signal_assignment(node);
        }
    }
    fn enter_instantiated_unit(&mut self, node: &InstantiatedUnit) {
        for visitor in &mut self.visitors {
            visitor.enter_instantiated_unit(node);
        }
    }
    fn exit_instantiated_unit(&mut self, node: &InstantiatedUnit) {
        for visitor in &mut self.visitors {
            visitor.exit_instantiated_unit(node);
        }
    }
    fn enter_instantiation_statement(&mut self, node: &InstantiationStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_instantiation_statement(node);
        }
    }
    fn exit_instantiation_statement(&mut self, node: &InstantiationStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_instantiation_statement(node);
        }
    }
    fn enter_generate_body(&mut self, node: &GenerateBody) {
        for visitor in &mut self.visitors {
            visitor.enter_generate_body(node);
        }
    }
    fn exit_generate_body(&mut self, node: &GenerateBody) {
        for visitor in &mut self.visitors {
            visitor.exit_generate_body(node);
        }
    }
    fn enter_for_generate_statement(&mut self, node: &ForGenerateStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_for_generate_statement(node);
        }
    }
    fn exit_for_generate_statement(&mut self, node: &ForGenerateStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_for_generate_statement(node);
        }
    }
    fn enter_concurrent_statement(&mut self, node: &ConcurrentStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_concurrent_statement(node);
        }
    }
    fn exit_concurrent_statement(&mut self, node: &ConcurrentStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_concurrent_statement(node);
        }
    }
    fn enter_labeled_concurrent_statement(&mut self, node: &LabeledConcurrentStatement) {
        for visitor in &mut self.visitors {
            visitor.enter_labeled_concurrent_statement(node);
        }
    }
    fn exit_labeled_concurrent_statement(&mut self, node: &LabeledConcurrentStatement) {
        for visitor in &mut self.visitors {
            visitor.exit_labeled_concurrent_statement(node);
        }
    }
    fn enter_library_clause(&mut self, node: &LibraryClause) {
        for visitor in &mut self.visitors {
            visitor.enter_library_clause(node);
        }
    }
    fn exit_library_clause(&mut self, node: &LibraryClause) {
        for visitor in &mut self.visitors {
            visitor.exit_library_clause(node);
        }
    }
    fn enter_use_clause(&mut self, node: &UseClause) {
        for visitor in &mut self.visitors {
            visitor.enter_use_clause(node);
        }
    }
    fn exit_use_clause(&mut self, node: &UseClause) {
        for visitor in &mut self.visitors {
            visitor.exit_use_clause(node);
        }
    }
    fn enter_context_reference(&mut self, node: &ContextReference) {
        for visitor in &mut self.visitors {
            visitor.enter_context_reference(node);
        }
    }
    fn exit_context_reference(&mut self, node: &ContextReference) {
        for visitor in &mut self.visitors {
            visitor.exit_context_reference(node);
        }
    }
    fn enter_context_item(&mut self, node: &ContextItem) {
        for visitor in &mut self.visitors {
            visitor.enter_context_item(node);
        }
    }
    fn exit_context_item(&mut self, node: &ContextItem) {
        for visitor in &mut self.visitors {
            visitor.exit_context_item(node);
        }
    }
    fn enter_context_declaration(&mut self, node: &ContextDeclaration) {
        for visitor in &mut self.visitors {
            visitor.enter_context_declaration(node);
        }
    }
    fn exit_context_declaration(&mut self, node: &ContextDeclaration) {
        for visitor in &mut self.visitors {
            visitor.exit_context_declaration(node);
        }
    }
    fn enter_package_instantiation(&mut self, node: &PackageInstantiation) {
        for visitor in &mut self.visitors {
            visitor.enter_package_instantiation(node);
        }
    }
    fn exit_package_instantiation(&mut self, node: &PackageInstantiation) {
        for visitor in &mut self.visitors {
            visitor.exit_package_instantiation(node);
        }
    }
    fn enter_instantiation_list(&mut self, node: &InstantiationList) {
        for visitor in &mut self.visitors {
            visitor.enter_instantiation_list(node);
        }
    }
    fn exit_instantiation_list(&mut self, node: &InstantiationList) {
        for visitor in &mut self.visitors {
            visitor.exit_instantiation_list(node);
        }
    }
    fn enter_entity_aspect(&mut self, node: &EntityAspect) {
        for visitor in &mut self.visitors {
            visitor.enter_entity_aspect(node);
        }
    }
    fn exit_entity_aspect(&mut self, node: &EntityAspect) {
        for visitor in &mut self.visitors {
            visitor.exit_entity_aspect(node);
        }
    }
    fn enter_binding_indication(&mut self, node: &BindingIndication) {
        for visitor in &mut self.visitors {
            visitor.enter_binding_indication(node);
        }
    }
    fn exit_binding_indication(&mut self, node: &BindingIndication) {
        for visitor in &mut self.visitors {
            visitor.exit_binding_indication(node);
        }
    }
    fn enter_component_specification(&mut self, node: &ComponentSpecification) {
        for visitor in &mut self.visitors {
            visitor.enter_component_specification(node);
        }
    }
    fn exit_component_specification(&mut self, node: &ComponentSpecification) {
        for visitor in &mut self.visitors {
            visitor.exit_component_specification(node);
        }
    }
    fn enter_v_unit_binding_indication(&mut self, node: &VUnitBindingIndication) {
        for visitor in &mut self.visitors {
            visitor.enter_v_unit_binding_indication(node);
        }
    }
    fn exit_v_unit_binding_indication(&mut self, node: &VUnitBindingIndication) {
        for visitor in &mut self.visitors {
            visitor.exit_v_unit_binding_indication(node);
        }
    }
    fn enter_configuration_specification(&mut self, node: &ConfigurationSpecification) {
        for visitor in &mut self.visitors {
            visitor.enter_configuration_specification(node);
        }
    }
    fn exit_configuration_specification(&mut self, node: &ConfigurationSpecification) {
        for visitor in &mut self.visitors {
            visitor.exit_configuration_specification(node);
        }
    }
    fn enter_configuration_declarative_item(&mut self, node: &ConfigurationDeclarativeItem) {
        for visitor in &mut self.visitors {
            visitor.enter_configuration_declarative_item(node);
        }
    }
    fn exit_configuration_declarative_item(&mut self, node: &ConfigurationDeclarativeItem) {
        for visitor in &mut self.visitors {
            visitor.exit_configuration_declarative_item(node);
        }
    }
    fn enter_component_configuration(&mut self, node: &ComponentConfiguration) {
        for visitor in &mut self.visitors {
            visitor.enter_component_configuration(node);
        }
    }
    fn exit_component_configuration(&mut self, node: &ComponentConfiguration) {
        for visitor in &mut self.visitors {
            visitor.exit_component_configuration(node);
        }
    }
    fn enter_configuration_item(&mut self, node: &ConfigurationItem) {
        for visitor in &mut self.visitors {
            visitor.enter_configuration_item(node);
        }
    }
    fn exit_configuration_item(&mut self, node: &ConfigurationItem) {
        for visitor in &mut self.visitors {
            visitor.exit_configuration_item(node);
        }
    }
    fn enter_block_configuration(&mut self, node: &BlockConfiguration) {
        for visitor in &mut self.visitors {
            visitor.enter_block_configuration(node);
        }
    }
    fn exit_block_configuration(&mut self, node: &BlockConfiguration) {
        for visitor in &mut self.visitors {
            visitor.exit_block_configuration(node);
        }
    }
    fn enter_configuration_declaration(&mut self, node: &ConfigurationDeclaration) {
        for visitor in &mut self.visitors {
            visitor.enter_configuration_declaration(node);
        }
    }
    fn exit_configuration_declaration(&mut self, node: &ConfigurationDeclaration) {
        for visitor in &mut self.visitors {
            visitor.exit_configuration_declaration(node);
        }
    }
    fn enter_entity_declaration(&mut self, node: &EntityDeclaration) {
        for visitor in &mut self.visitors {
            visitor.enter_entity_declaration(node);
        }
    }
    fn exit_entity_declaration(&mut self, node: &EntityDeclaration) {
        for visitor in &mut self.visitors {
            visitor.exit_entity_declaration(node);
        }
    }
    fn enter_architecture_body(&mut self, node: &ArchitectureBody) {
        for visitor in &mut self.visitors {
            visitor.enter_architecture_body(node);
        }
    }
    fn exit_architecture_body(&mut self, node: &ArchitectureBody) {
        for visitor in &mut self.visitors {
            visitor.exit_architecture_body(node);
        }
    }
    fn enter_package_declaration(&mut self, node: &PackageDeclaration) {
        for visitor in &mut self.visitors {
            visitor.enter_package_declaration(node);
        }
    }
    fn exit_package_declaration(&mut self, node: &PackageDeclaration) {
        for visitor in &mut self.visitors {
            visitor.exit_package_declaration(node);
        }
    }
    fn enter_package_body(&mut self, node: &PackageBody) {
        for visitor in &mut self.visitors {
            visitor.enter_package_body(node);
        }
    }
    fn exit_package_body(&mut self, node: &PackageBody) {
        for visitor in &mut self.visitors {
            visitor.exit_package_body(node);
        }
    }
    fn enter_primary_unit(&mut self, node: &PrimaryUnit) {
        for visitor in &mut self.visitors {
            visitor.enter_primary_unit(node);
        }
    }
    fn exit_primary_unit(&mut self, node: &PrimaryUnit) {
        for visitor in &mut self.visitors {
            visitor.exit_primary_unit(node);
        }
    }
    fn enter_secondary_unit(&mut self, node: &SecondaryUnit) {
        for visitor in &mut self.visitors {
            visitor.enter_secondary_unit(node);
        }
    }
    fn exit_secondary_unit(&mut self, node: &SecondaryUnit) {
        for visitor in &mut self.visitors {
            visitor.exit_secondary_unit(node);
        }
    }
    fn enter_design_unit_entity_declaration(&mut self, node: &DesignUnit<EntityDeclaration>) {
        for visitor in &mut self.visitors {
            visitor.enter_design_unit_entity_declaration(node);
        }
    }
    fn exit_design_unit_entity_declaration(&mut self, node: &DesignUnit<EntityDeclaration>) {
        for visitor in &mut self.visitors {
            visitor.exit_design_unit_entity_declaration(node);
        }
    }
    fn enter_design_unit_package_instantiation(&mut self, node: &DesignUnit<PackageInstantiation>) {
        for visitor in &mut self.visitors {
            visitor.enter_design_unit_package_instantiation(node);
        }
    }
    fn exit_design_unit_package_instantiation(&mut self, node: &DesignUnit<PackageInstantiation>) {
        for visitor in &mut self.visitors {
            visitor.exit_design_unit_package_instantiation(node);
        }
    }
    fn enter_design_unit_configuration_declaration(
        &mut self,
        node: &DesignUnit<ConfigurationDeclaration>,
    ) {
        for visitor in &mut self.visitors {
            visitor.enter_design_unit_configuration_declaration(node);
        }
    }
    fn exit_design_unit_configuration_declaration(
        &mut self,
        node: &DesignUnit<ConfigurationDeclaration>,
    ) {
        for visitor in &mut self.visitors {
            visitor.exit_design_unit_configuration_declaration(node);
        }
    }
    fn enter_design_unit_package_body(&mut self, node: &DesignUnit<PackageBody>) {
        for visitor in &mut self.visitors {
            visitor.enter_design_unit_package_body(node);
        }
    }
    fn exit_design_unit_package_body(&mut self, node: &DesignUnit<PackageBody>) {
        for visitor in &mut self.visitors {
            visitor.exit_design_unit_package_body(node);
        }
    }
    fn enter_design_unit_architecture_body(&mut self, node: &DesignUnit<ArchitectureBody>) {
        for visitor in &mut self.visitors {
            visitor.enter_design_unit_architecture_body(node);
        }
    }
    fn exit_design_unit_architecture_body(&mut self, node: &DesignUnit<ArchitectureBody>) {
        for visitor in &mut self.visitors {
            visitor.exit_design_unit_architecture_body(node);
        }
    }
    fn enter_design_unit_package_declaration(&mut self, node: &DesignUnit<PackageDeclaration>) {
        for visitor in &mut self.visitors {
            visitor.enter_design_unit_package_declaration(node);
        }
    }
    fn exit_design_unit_package_declaration(&mut self, node: &DesignUnit<PackageDeclaration>) {
        for visitor in &mut self.visitors {
            visitor.exit_design_unit_package_declaration(node);
        }
    }
    fn enter_any_design_unit(&mut self, node: &AnyDesignUnit) {
        for visitor in &mut self.visitors {
            visitor.enter_any_design_unit(node);
        }
    }
    fn exit_any_design_unit(&mut self, node: &AnyDesignUnit) {
        for visitor in &mut self.visitors {
            visitor.exit_any_design_unit(node);
        }
    }
    fn enter_design_file(&mut self, node: &DesignFile) {
        for visitor in &mut self.visitors {
            visitor.enter_design_file(node);
        }
    }
    fn exit_design_file(&mut self, node: &DesignFile) {
        for visitor in &mut self.visitors {
            visitor.exit_design_file(node);
        }
    }
}

impl<'a> Visit<'a> for Symbol {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_symbol(self);
        visitor.exit_symbol(self);
    }
}

impl<'a> Visit<'a> for AttributeName {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_attribute_name(self);
        self.name.visit(visitor);
        self.signature.visit(visitor);
        self.attr.visit(visitor);
        self.expr.visit(visitor);
        visitor.exit_attribute_name(self);
    }
}

impl<'a> Visit<'a> for ExternalPath {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_external_path(self);
        match self {
            ExternalPath::Package(node) => node.visit(visitor),
            ExternalPath::Absolute(node) => node.visit(visitor),
            ExternalPath::Relative(node) => node.visit(visitor),
        }
        visitor.exit_external_path(self);
    }
}

impl<'a> Visit<'a> for ExternalName {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_external_name(self);
        self.path.visit(visitor);
        self.subtype.visit(visitor);
        visitor.exit_external_name(self);
    }
}

impl<'a> Visit<'a> for Name {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_name(self);
        match self {
            Name::Designator(node) => node.visit(visitor),
            Name::Selected(node0, node1) => {
                node0.visit(visitor);
                node1.visit(visitor);
            }
            Name::SelectedAll(node) => node.visit(visitor),
            Name::Indexed(node0, node1) => {
                node0.visit(visitor);
                node1.visit(visitor);
            }
            Name::Slice(node0, node1) => {
                node0.visit(visitor);
                node1.visit(visitor);
            }
            Name::Attribute(node) => node.visit(visitor),
            Name::FunctionCall(node) => node.visit(visitor),
            Name::External(node) => node.visit(visitor),
        }
        visitor.exit_name(self);
    }
}

impl<'a> Visit<'a> for SelectedName {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_selected_name(self);
        match self {
            SelectedName::Designator(node) => node.visit(visitor),
            SelectedName::Selected(node0, node1) => {
                node0.visit(visitor);
                node1.visit(visitor);
            }
        }
        visitor.exit_selected_name(self);
    }
}

impl<'a> Visit<'a> for FunctionCall {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_function_call(self);
        self.name.visit(visitor);
        self.parameters.visit(visitor);
        visitor.exit_function_call(self);
    }
}

impl<'a> Visit<'a> for Choice {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_choice(self);
        match self {
            Choice::Expression(node) => node.visit(visitor),
            Choice::DiscreteRange(node) => node.visit(visitor),
            Choice::Others => (),
        }
        visitor.exit_choice(self);
    }
}

impl<'a> Visit<'a> for ElementAssociation {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_element_association(self);
        match self {
            ElementAssociation::Positional(node) => node.visit(visitor),
            ElementAssociation::Named(node0, node1) => {
                node0.visit(visitor);
                node1.visit(visitor);
            }
        }
        visitor.exit_element_association(self);
    }
}

impl<'a> Visit<'a> for ActualPart {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_actual_part(self);
        match self {
            ActualPart::Expression(node) => node.visit(visitor),
            ActualPart::Open => (),
        }
        visitor.exit_actual_part(self);
    }
}

impl<'a> Visit<'a> for AssociationElement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_association_element(self);
        self.formal.visit(visitor);
        self.actual.visit(visitor);
        visitor.exit_association_element(self);
    }
}

impl<'a> Visit<'a> for AbstractLiteral {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_abstract_literal(self);
        match self {
            AbstractLiteral::Integer(..) => (),
            AbstractLiteral::Real(..) => (),
        }
        visitor.exit_abstract_literal(self);
    }
}

impl<'a> Visit<'a> for BitString {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_bit_string(self);
        visitor.exit_bit_string(self);
    }
}

impl<'a> Visit<'a> for Literal {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_literal(self);
        match self {
            Literal::String(..) => (),
            Literal::BitString(node) => node.visit(visitor),
            Literal::Character(..) => (),
            Literal::AbstractLiteral(node) => node.visit(visitor),
            Literal::Physical(node0, node1) => {
                node0.visit(visitor);
                node1.visit(visitor);
            }
            Literal::Null => (),
        }
        visitor.exit_literal(self);
    }
}

impl<'a> Visit<'a> for Allocator {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_allocator(self);
        match self {
            Allocator::Qualified(node) => node.visit(visitor),
            Allocator::Subtype(node) => node.visit(visitor),
        }
        visitor.exit_allocator(self);
    }
}

impl<'a> Visit<'a> for QualifiedExpression {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_qualified_expression(self);
        self.name.visit(visitor);
        self.expr.visit(visitor);
        visitor.exit_qualified_expression(self);
    }
}

impl<'a> Visit<'a> for Expression {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_expression(self);
        match self {
            Expression::Binary(_node0, node1, node2) => {
                node1.visit(visitor);
                node2.visit(visitor);
            }
            Expression::Unary(_node0, node1) => {
                node1.visit(visitor);
            }
            Expression::Aggregate(node) => node.visit(visitor),
            Expression::Qualified(node) => node.visit(visitor),
            Expression::Name(node) => node.visit(visitor),
            Expression::Literal(node) => node.visit(visitor),
            Expression::New(node) => node.visit(visitor),
        }
        visitor.exit_expression(self);
    }
}

impl<'a> Visit<'a> for Direction {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_direction(self);
        match self {
            Direction::Ascending => (),
            Direction::Descending => (),
        }
        visitor.exit_direction(self);
    }
}

impl<'a> Visit<'a> for DiscreteRange {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_discrete_range(self);
        match self {
            DiscreteRange::Discrete(node0, node1) => {
                node0.visit(visitor);
                node1.visit(visitor);
            }
            DiscreteRange::Range(node) => node.visit(visitor),
        }
        visitor.exit_discrete_range(self);
    }
}

impl<'a> Visit<'a> for RangeConstraint {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_range_constraint(self);
        self.direction.visit(visitor);
        self.left_expr.visit(visitor);
        self.right_expr.visit(visitor);
        visitor.exit_range_constraint(self);
    }
}

impl<'a> Visit<'a> for Range {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_range(self);
        match self {
            Range::Range(node) => node.visit(visitor),
            Range::Attribute(node) => node.visit(visitor),
        }
        visitor.exit_range(self);
    }
}

impl<'a> Visit<'a> for ElementConstraint {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_element_constraint(self);
        self.ident.visit(visitor);
        self.constraint.visit(visitor);
        visitor.exit_element_constraint(self);
    }
}

impl<'a> Visit<'a> for SubtypeConstraint {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_subtype_constraint(self);
        match self {
            SubtypeConstraint::Range(node) => node.visit(visitor),
            SubtypeConstraint::Array(node0, node1) => {
                node0.visit(visitor);
                node1.visit(visitor);
            }
            SubtypeConstraint::Record(node) => node.visit(visitor),
        }
        visitor.exit_subtype_constraint(self);
    }
}

impl<'a> Visit<'a> for RecordElementResolution {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_record_element_resolution(self);
        self.ident.visit(visitor);
        self.resolution.visit(visitor);
        visitor.exit_record_element_resolution(self);
    }
}

impl<'a> Visit<'a> for ResolutionIndication {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_resolution_indication(self);
        match self {
            ResolutionIndication::FunctionName(node) => node.visit(visitor),
            ResolutionIndication::ArrayElement(node) => node.visit(visitor),
            ResolutionIndication::Record(node) => node.visit(visitor),
            ResolutionIndication::Unresolved => (),
        }
        visitor.exit_resolution_indication(self);
    }
}

impl<'a> Visit<'a> for SubtypeIndication {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_subtype_indication(self);
        self.resolution.visit(visitor);
        self.type_mark.visit(visitor);
        self.constraint.visit(visitor);
        visitor.exit_subtype_indication(self);
    }
}

impl<'a> Visit<'a> for ArrayIndex {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_array_index(self);
        match self {
            ArrayIndex::IndexSubtypeDefintion(node) => node.visit(visitor),
            ArrayIndex::Discrete(node) => node.visit(visitor),
        }
        visitor.exit_array_index(self);
    }
}

impl<'a> Visit<'a> for ElementDeclaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_element_declaration(self);
        self.ident.visit(visitor);
        self.subtype.visit(visitor);
        visitor.exit_element_declaration(self);
    }
}

impl<'a> Visit<'a> for ProtectedTypeDeclarativeItem {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_protected_type_declarative_item(self);
        match self {
            ProtectedTypeDeclarativeItem::Subprogram(node) => node.visit(visitor),
        }
        visitor.exit_protected_type_declarative_item(self);
    }
}

impl<'a> Visit<'a> for Designator {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_designator(self);
        match self {
            Designator::Identifier(node) => node.visit(visitor),
            Designator::OperatorSymbol(..) => (),
            Designator::Character(..) => (),
        }
        visitor.exit_designator(self);
    }
}

impl<'a> Visit<'a> for AliasDeclaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_alias_declaration(self);
        self.designator.visit(visitor);
        self.subtype_indication.visit(visitor);
        self.name.visit(visitor);
        self.signature.visit(visitor);
        visitor.exit_alias_declaration(self);
    }
}

impl<'a> Visit<'a> for AttributeDeclaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_attribute_declaration(self);
        self.ident.visit(visitor);
        self.type_mark.visit(visitor);
        visitor.exit_attribute_declaration(self);
    }
}

impl<'a> Visit<'a> for EntityTag {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_entity_tag(self);
        self.designator.visit(visitor);
        self.signature.visit(visitor);
        visitor.exit_entity_tag(self);
    }
}

impl<'a> Visit<'a> for EntityName {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_entity_name(self);
        match self {
            EntityName::Name(node) => node.visit(visitor),
            EntityName::All => (),
            EntityName::Others => (),
        }
        visitor.exit_entity_name(self);
    }
}

impl<'a> Visit<'a> for EntityClass {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_entity_class(self);
        match self {
            EntityClass::Entity => (),
            EntityClass::Architecture => (),
            EntityClass::Configuration => (),
            EntityClass::Package => (),
            EntityClass::Signal => (),
            EntityClass::Variable => (),
            EntityClass::Procedure => (),
            EntityClass::Function => (),
        }
        visitor.exit_entity_class(self);
    }
}

impl<'a> Visit<'a> for AttributeSpecification {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_attribute_specification(self);
        self.ident.visit(visitor);
        self.entity_name.visit(visitor);
        self.entity_class.visit(visitor);
        self.expr.visit(visitor);
        visitor.exit_attribute_specification(self);
    }
}

impl<'a> Visit<'a> for Attribute {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_attribute(self);
        match self {
            Attribute::Specification(node) => node.visit(visitor),
            Attribute::Declaration(node) => node.visit(visitor),
        }
        visitor.exit_attribute(self);
    }
}

impl<'a> Visit<'a> for ProtectedTypeDeclaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_protected_type_declaration(self);
        self.items.visit(visitor);
        visitor.exit_protected_type_declaration(self);
    }
}

impl<'a> Visit<'a> for ProtectedTypeBody {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_protected_type_body(self);
        self.decl.visit(visitor);
        visitor.exit_protected_type_body(self);
    }
}

impl<'a> Visit<'a> for PhysicalTypeDeclaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_physical_type_declaration(self);
        self.range.visit(visitor);
        self.primary_unit.visit(visitor);
        self.secondary_units.visit(visitor);
        visitor.exit_physical_type_declaration(self);
    }
}

impl<'a> Visit<'a> for EnumerationLiteral {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_enumeration_literal(self);
        match self {
            EnumerationLiteral::Identifier(node) => node.visit(visitor),
            EnumerationLiteral::Character(..) => (),
        }
        visitor.exit_enumeration_literal(self);
    }
}

impl<'a> Visit<'a> for TypeDefinition {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_type_definition(self);
        match self {
            TypeDefinition::Enumeration(node) => node.visit(visitor),
            TypeDefinition::Integer(node) => node.visit(visitor),
            TypeDefinition::Physical(node) => node.visit(visitor),
            TypeDefinition::Array(node0, node1) => {
                node0.visit(visitor);
                node1.visit(visitor);
            }
            TypeDefinition::Record(node) => node.visit(visitor),
            TypeDefinition::Access(node) => node.visit(visitor),
            TypeDefinition::Incomplete => (),
            TypeDefinition::File(node) => node.visit(visitor),
            TypeDefinition::Protected(node) => node.visit(visitor),
            TypeDefinition::ProtectedBody(node) => node.visit(visitor),
            TypeDefinition::Subtype(node) => node.visit(visitor),
        }
        visitor.exit_type_definition(self);
    }
}

impl<'a> Visit<'a> for TypeDeclaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_type_declaration(self);
        self.ident.visit(visitor);
        self.def.visit(visitor);
        visitor.exit_type_declaration(self);
    }
}

impl<'a> Visit<'a> for ObjectClass {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_object_class(self);
        match self {
            ObjectClass::Signal => (),
            ObjectClass::Constant => (),
            ObjectClass::Variable => (),
            ObjectClass::SharedVariable => (),
        }
        visitor.exit_object_class(self);
    }
}

impl<'a> Visit<'a> for ObjectDeclaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_object_declaration(self);
        self.class.visit(visitor);
        self.ident.visit(visitor);
        self.subtype_indication.visit(visitor);
        self.expression.visit(visitor);
        visitor.exit_object_declaration(self);
    }
}

impl<'a> Visit<'a> for FileDeclaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_file_declaration(self);
        self.ident.visit(visitor);
        self.subtype_indication.visit(visitor);
        self.open_info.visit(visitor);
        self.file_name.visit(visitor);
        visitor.exit_file_declaration(self);
    }
}

impl<'a> Visit<'a> for SubprogramDesignator {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_subprogram_designator(self);
        match self {
            SubprogramDesignator::Identifier(node) => node.visit(visitor),
            SubprogramDesignator::OperatorSymbol(..) => (),
        }
        visitor.exit_subprogram_designator(self);
    }
}

impl<'a> Visit<'a> for ProcedureSpecification {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_procedure_specification(self);
        self.designator.visit(visitor);
        self.parameter_list.visit(visitor);
        visitor.exit_procedure_specification(self);
    }
}

impl<'a> Visit<'a> for FunctionSpecification {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_function_specification(self);
        self.designator.visit(visitor);
        self.parameter_list.visit(visitor);
        self.return_type.visit(visitor);
        visitor.exit_function_specification(self);
    }
}

impl<'a> Visit<'a> for SubprogramBody {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_subprogram_body(self);
        self.specification.visit(visitor);
        self.declarations.visit(visitor);
        self.statements.visit(visitor);
        visitor.exit_subprogram_body(self);
    }
}

impl<'a> Visit<'a> for Signature {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_signature(self);
        match self {
            Signature::Function(node0, node1) => {
                node0.visit(visitor);
                node1.visit(visitor);
            }
            Signature::Procedure(node) => node.visit(visitor),
        }
        visitor.exit_signature(self);
    }
}

impl<'a> Visit<'a> for SubprogramDeclaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_subprogram_declaration(self);
        match self {
            SubprogramDeclaration::Procedure(node) => node.visit(visitor),
            SubprogramDeclaration::Function(node) => node.visit(visitor),
        }
        visitor.exit_subprogram_declaration(self);
    }
}

impl<'a> Visit<'a> for InterfaceFileDeclaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_interface_file_declaration(self);
        self.ident.visit(visitor);
        self.subtype_indication.visit(visitor);
        visitor.exit_interface_file_declaration(self);
    }
}

impl<'a> Visit<'a> for InterfaceObjectDeclaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_interface_object_declaration(self);
        self.class.visit(visitor);
        self.ident.visit(visitor);
        self.mode.visit(visitor);
        self.subtype_indication.visit(visitor);
        self.expression.visit(visitor);
        visitor.exit_interface_object_declaration(self);
    }
}

impl<'a> Visit<'a> for SubprogramDefault {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_subprogram_default(self);
        match self {
            SubprogramDefault::Name(node) => node.visit(visitor),
            SubprogramDefault::Box => (),
        }
        visitor.exit_subprogram_default(self);
    }
}

impl<'a> Visit<'a> for InterfacePackageGenericMapAspect {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_interface_package_generic_map_aspect(self);
        match self {
            InterfacePackageGenericMapAspect::Map(node) => node.visit(visitor),
            InterfacePackageGenericMapAspect::Box => (),
            InterfacePackageGenericMapAspect::Default => (),
        }
        visitor.exit_interface_package_generic_map_aspect(self);
    }
}

impl<'a> Visit<'a> for InterfacePackageDeclaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_interface_package_declaration(self);
        self.ident.visit(visitor);
        self.package_name.visit(visitor);
        self.generic_map.visit(visitor);
        visitor.exit_interface_package_declaration(self);
    }
}

impl<'a> Visit<'a> for InterfaceDeclaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_interface_declaration(self);
        match self {
            InterfaceDeclaration::Object(node) => node.visit(visitor),
            InterfaceDeclaration::File(node) => node.visit(visitor),
            InterfaceDeclaration::Type(node) => node.visit(visitor),
            InterfaceDeclaration::Subprogram(node0, node1) => {
                node0.visit(visitor);
                node1.visit(visitor);
            }
            InterfaceDeclaration::Package(node) => node.visit(visitor),
        }
        visitor.exit_interface_declaration(self);
    }
}

impl<'a> Visit<'a> for Mode {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_mode(self);
        match self {
            Mode::In => (),
            Mode::Out => (),
            Mode::InOut => (),
            Mode::Buffer => (),
            Mode::Linkage => (),
        }
        visitor.exit_mode(self);
    }
}

impl<'a> Visit<'a> for PortClause {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_port_clause(self);
        self.port_list.visit(visitor);
        visitor.exit_port_clause(self);
    }
}

impl<'a> Visit<'a> for ComponentDeclaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_component_declaration(self);
        self.ident.visit(visitor);
        self.generic_list.visit(visitor);
        self.port_list.visit(visitor);
        visitor.exit_component_declaration(self);
    }
}

impl<'a> Visit<'a> for Declaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_declaration(self);
        match self {
            Declaration::Object(node) => node.visit(visitor),
            Declaration::File(node) => node.visit(visitor),
            Declaration::Type(node) => node.visit(visitor),
            Declaration::Component(node) => node.visit(visitor),
            Declaration::Attribute(node) => node.visit(visitor),
            Declaration::Alias(node) => node.visit(visitor),
            Declaration::SubprogramDeclaration(node) => node.visit(visitor),
            Declaration::SubprogramBody(node) => node.visit(visitor),
            Declaration::Use(node) => node.visit(visitor),
            Declaration::Package(node) => node.visit(visitor),
            Declaration::Configuration(node) => node.visit(visitor),
        }
        visitor.exit_declaration(self);
    }
}

impl<'a> Visit<'a> for WaitStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_wait_statement(self);
        self.sensitivity_clause.visit(visitor);
        self.condition_clause.visit(visitor);
        self.timeout_clause.visit(visitor);
        visitor.exit_wait_statement(self);
    }
}

impl<'a> Visit<'a> for AssertStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_assert_statement(self);
        self.condition.visit(visitor);
        self.report.visit(visitor);
        self.severity.visit(visitor);
        visitor.exit_assert_statement(self);
    }
}

impl<'a> Visit<'a> for ReportStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_report_statement(self);
        self.report.visit(visitor);
        self.severity.visit(visitor);
        visitor.exit_report_statement(self);
    }
}

impl<'a> Visit<'a> for Target {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_target(self);
        match self {
            Target::Name(node) => node.visit(visitor),
            Target::Aggregate(node) => node.visit(visitor),
        }
        visitor.exit_target(self);
    }
}

impl<'a> Visit<'a> for WaveformElement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_waveform_element(self);
        self.value.visit(visitor);
        self.after.visit(visitor);
        visitor.exit_waveform_element(self);
    }
}

impl<'a> Visit<'a> for Waveform {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_waveform(self);
        match self {
            Waveform::Elements(node) => node.visit(visitor),
            Waveform::Unaffected => (),
        }
        visitor.exit_waveform(self);
    }
}

impl<'a> Visit<'a> for DelayMechanism {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_delay_mechanism(self);
        match self {
            DelayMechanism::Transport => (),
            DelayMechanism::Inertial { reject } => reject.visit(visitor),
        }
        visitor.exit_delay_mechanism(self);
    }
}

impl<'a> Visit<'a> for SignalAssignment {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_signal_assignment(self);
        self.target.visit(visitor);
        self.delay_mechanism.visit(visitor);
        self.rhs.visit(visitor);
        visitor.exit_signal_assignment(self);
    }
}

impl<'a> Visit<'a> for VariableAssignment {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_variable_assignment(self);
        self.target.visit(visitor);
        self.rhs.visit(visitor);
        visitor.exit_variable_assignment(self);
    }
}

impl<'a> Visit<'a> for AssignmentRightHand<Waveform> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_assignment_right_hand_waveform(self);
        match self {
            AssignmentRightHand::Simple(node) => node.visit(visitor),
            AssignmentRightHand::Conditional(node) => node.visit(visitor),
            AssignmentRightHand::Selected(node) => node.visit(visitor),
        }
        visitor.exit_assignment_right_hand_waveform(self);
    }
}

impl<'a> Visit<'a> for AssignmentRightHand<WithPos<Expression>> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_assignment_right_hand_with_pos_expression(self);
        match self {
            AssignmentRightHand::Simple(node) => node.visit(visitor),
            AssignmentRightHand::Conditional(node) => node.visit(visitor),
            AssignmentRightHand::Selected(node) => node.visit(visitor),
        }
        visitor.exit_assignment_right_hand_with_pos_expression(self);
    }
}

impl<'a> Visit<'a> for ConditionalExpression {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_conditional_expression(self);
        self.condition.visit(visitor);
        self.item.visit(visitor);
        visitor.exit_conditional_expression(self);
    }
}

impl<'a> Visit<'a> for Conditional<GenerateBody> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_conditional_generate_body(self);
        self.condition.visit(visitor);
        self.item.visit(visitor);
        visitor.exit_conditional_generate_body(self);
    }
}

impl<'a> Visit<'a> for Conditional<Vec<LabeledSequentialStatement>> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_conditional_vec_labeled_sequential_statement(self);
        self.condition.visit(visitor);
        self.item.visit(visitor);
        visitor.exit_conditional_vec_labeled_sequential_statement(self);
    }
}

impl<'a> Visit<'a> for Conditional<Waveform> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_conditional_waveform(self);
        self.condition.visit(visitor);
        self.item.visit(visitor);
        visitor.exit_conditional_waveform(self);
    }
}

impl<'a> Visit<'a> for IfGenerateStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_if_generate_statement(self);
        self.conditionals.visit(visitor);
        self.else_item.visit(visitor);
        visitor.exit_if_generate_statement(self);
    }
}

impl<'a> Visit<'a> for IfStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_if_statement(self);
        self.conditionals.visit(visitor);
        self.else_item.visit(visitor);
        visitor.exit_if_statement(self);
    }
}

impl<'a> Visit<'a> for ConditionalExpressions {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_conditional_expressions(self);
        self.conditionals.visit(visitor);
        self.else_item.visit(visitor);
        visitor.exit_conditional_expressions(self);
    }
}

impl<'a> Visit<'a> for Conditionals<Waveform> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_conditionals_waveform(self);
        self.conditionals.visit(visitor);
        self.else_item.visit(visitor);
        visitor.exit_conditionals_waveform(self);
    }
}

impl<'a> Visit<'a> for Alternative<GenerateBody> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_alternative_generate_body(self);
        self.choices.visit(visitor);
        self.item.visit(visitor);
        visitor.exit_alternative_generate_body(self);
    }
}

impl<'a> Visit<'a> for Alternative<Vec<LabeledSequentialStatement>> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_alternative_vec_labeled_sequential_statement(self);
        self.choices.visit(visitor);
        self.item.visit(visitor);
        visitor.exit_alternative_vec_labeled_sequential_statement(self);
    }
}

impl<'a> Visit<'a> for Alternative<Waveform> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_alternative_waveform(self);
        self.choices.visit(visitor);
        self.item.visit(visitor);
        visitor.exit_alternative_waveform(self);
    }
}

impl<'a> Visit<'a> for Alternative<WithPos<Expression>> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_alternative_with_pos_expression(self);
        self.choices.visit(visitor);
        self.item.visit(visitor);
        visitor.exit_alternative_with_pos_expression(self);
    }
}

impl<'a> Visit<'a> for CaseGenerateStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_case_generate_statement(self);
        self.expression.visit(visitor);
        self.alternatives.visit(visitor);
        visitor.exit_case_generate_statement(self);
    }
}

impl<'a> Visit<'a> for CaseStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_case_statement(self);
        self.expression.visit(visitor);
        self.alternatives.visit(visitor);
        visitor.exit_case_statement(self);
    }
}

impl<'a> Visit<'a> for Selection<Waveform> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_selection_waveform(self);
        self.expression.visit(visitor);
        self.alternatives.visit(visitor);
        visitor.exit_selection_waveform(self);
    }
}

impl<'a> Visit<'a> for Selection<WithPos<Expression>> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_selection_with_pos_expression(self);
        self.expression.visit(visitor);
        self.alternatives.visit(visitor);
        visitor.exit_selection_with_pos_expression(self);
    }
}

impl<'a> Visit<'a> for IterationScheme {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_iteration_scheme(self);
        match self {
            IterationScheme::While(node) => node.visit(visitor),
            IterationScheme::For(node0, node1) => {
                node0.visit(visitor);
                node1.visit(visitor);
            }
        }
        visitor.exit_iteration_scheme(self);
    }
}

impl<'a> Visit<'a> for LoopStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_loop_statement(self);
        self.iteration_scheme.visit(visitor);
        self.statements.visit(visitor);
        visitor.exit_loop_statement(self);
    }
}

impl<'a> Visit<'a> for NextStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_next_statement(self);
        self.loop_label.visit(visitor);
        self.condition.visit(visitor);
        visitor.exit_next_statement(self);
    }
}

impl<'a> Visit<'a> for ExitStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_exit_statement(self);
        self.loop_label.visit(visitor);
        self.condition.visit(visitor);
        visitor.exit_exit_statement(self);
    }
}

impl<'a> Visit<'a> for ReturnStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_return_statement(self);
        self.expression.visit(visitor);
        visitor.exit_return_statement(self);
    }
}

impl<'a> Visit<'a> for SequentialStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_sequential_statement(self);
        match self {
            SequentialStatement::Wait(node) => node.visit(visitor),
            SequentialStatement::Assert(node) => node.visit(visitor),
            SequentialStatement::Report(node) => node.visit(visitor),
            SequentialStatement::VariableAssignment(node) => node.visit(visitor),
            SequentialStatement::SignalAssignment(node) => node.visit(visitor),
            SequentialStatement::ProcedureCall(node) => node.visit(visitor),
            SequentialStatement::If(node) => node.visit(visitor),
            SequentialStatement::Case(node) => node.visit(visitor),
            SequentialStatement::Loop(node) => node.visit(visitor),
            SequentialStatement::Next(node) => node.visit(visitor),
            SequentialStatement::Exit(node) => node.visit(visitor),
            SequentialStatement::Return(node) => node.visit(visitor),
            SequentialStatement::Null => (),
        }
        visitor.exit_sequential_statement(self);
    }
}

impl<'a> Visit<'a> for LabeledSequentialStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_labeled_sequential_statement(self);
        self.label.visit(visitor);
        self.statement.visit(visitor);
        visitor.exit_labeled_sequential_statement(self);
    }
}

impl<'a> Visit<'a> for BlockStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_block_statement(self);
        self.guard_condition.visit(visitor);
        self.decl.visit(visitor);
        self.statements.visit(visitor);
        visitor.exit_block_statement(self);
    }
}

impl<'a> Visit<'a> for SensitivityList {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_sensitivity_list(self);
        match self {
            SensitivityList::Names(node) => node.visit(visitor),
            SensitivityList::All => (),
        }
        visitor.exit_sensitivity_list(self);
    }
}

impl<'a> Visit<'a> for ProcessStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_process_statement(self);
        self.sensitivity_list.visit(visitor);
        self.decl.visit(visitor);
        self.statements.visit(visitor);
        visitor.exit_process_statement(self);
    }
}

impl<'a> Visit<'a> for ConcurrentProcedureCall {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_concurrent_procedure_call(self);
        self.call.visit(visitor);
        visitor.exit_concurrent_procedure_call(self);
    }
}

impl<'a> Visit<'a> for ConcurrentAssertStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_concurrent_assert_statement(self);
        self.statement.visit(visitor);
        visitor.exit_concurrent_assert_statement(self);
    }
}

impl<'a> Visit<'a> for ConcurrentSignalAssignment {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_concurrent_signal_assignment(self);
        self.target.visit(visitor);
        self.delay_mechanism.visit(visitor);
        self.rhs.visit(visitor);
        visitor.exit_concurrent_signal_assignment(self);
    }
}

impl<'a> Visit<'a> for InstantiatedUnit {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_instantiated_unit(self);
        match self {
            InstantiatedUnit::Component(node) => node.visit(visitor),
            InstantiatedUnit::Entity(node0, node1) => {
                node0.visit(visitor);
                node1.visit(visitor);
            }
            InstantiatedUnit::Configuration(node) => node.visit(visitor),
        }
        visitor.exit_instantiated_unit(self);
    }
}

impl<'a> Visit<'a> for InstantiationStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_instantiation_statement(self);
        self.unit.visit(visitor);
        self.generic_map.visit(visitor);
        self.port_map.visit(visitor);
        visitor.exit_instantiation_statement(self);
    }
}

impl<'a> Visit<'a> for GenerateBody {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_generate_body(self);
        self.alternative_label.visit(visitor);
        self.decl.visit(visitor);
        self.statements.visit(visitor);
        visitor.exit_generate_body(self);
    }
}

impl<'a> Visit<'a> for ForGenerateStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_for_generate_statement(self);
        self.index_name.visit(visitor);
        self.discrete_range.visit(visitor);
        self.body.visit(visitor);
        visitor.exit_for_generate_statement(self);
    }
}

impl<'a> Visit<'a> for ConcurrentStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_concurrent_statement(self);
        match self {
            ConcurrentStatement::ProcedureCall(node) => node.visit(visitor),
            ConcurrentStatement::Block(node) => node.visit(visitor),
            ConcurrentStatement::Process(node) => node.visit(visitor),
            ConcurrentStatement::Assert(node) => node.visit(visitor),
            ConcurrentStatement::Assignment(node) => node.visit(visitor),
            ConcurrentStatement::Instance(node) => node.visit(visitor),
            ConcurrentStatement::ForGenerate(node) => node.visit(visitor),
            ConcurrentStatement::IfGenerate(node) => node.visit(visitor),
            ConcurrentStatement::CaseGenerate(node) => node.visit(visitor),
        }
        visitor.exit_concurrent_statement(self);
    }
}

impl<'a> Visit<'a> for LabeledConcurrentStatement {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_labeled_concurrent_statement(self);
        self.label.visit(visitor);
        self.statement.visit(visitor);
        visitor.exit_labeled_concurrent_statement(self);
    }
}

impl<'a> Visit<'a> for LibraryClause {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_library_clause(self);
        self.name_list.visit(visitor);
        visitor.exit_library_clause(self);
    }
}

impl<'a> Visit<'a> for UseClause {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_use_clause(self);
        self.name_list.visit(visitor);
        visitor.exit_use_clause(self);
    }
}

impl<'a> Visit<'a> for ContextReference {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_context_reference(self);
        self.name_list.visit(visitor);
        visitor.exit_context_reference(self);
    }
}

impl<'a> Visit<'a> for ContextItem {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_context_item(self);
        match self {
            ContextItem::Use(node) => node.visit(visitor),
            ContextItem::Library(node) => node.visit(visitor),
            ContextItem::Context(node) => node.visit(visitor),
        }
        visitor.exit_context_item(self);
    }
}

impl<'a> Visit<'a> for ContextDeclaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_context_declaration(self);
        self.ident.visit(visitor);
        self.items.visit(visitor);
        visitor.exit_context_declaration(self);
    }
}

impl<'a> Visit<'a> for PackageInstantiation {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_package_instantiation(self);
        self.ident.visit(visitor);
        self.package_name.visit(visitor);
        self.generic_map.visit(visitor);
        visitor.exit_package_instantiation(self);
    }
}

impl<'a> Visit<'a> for InstantiationList {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_instantiation_list(self);
        match self {
            InstantiationList::Labels(node) => node.visit(visitor),
            InstantiationList::Others => (),
            InstantiationList::All => (),
        }
        visitor.exit_instantiation_list(self);
    }
}

impl<'a> Visit<'a> for EntityAspect {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_entity_aspect(self);
        match self {
            EntityAspect::Entity(node0, node1) => {
                node0.visit(visitor);
                node1.visit(visitor);
            }
            EntityAspect::Configuration(node) => node.visit(visitor),
            EntityAspect::Open => (),
        }
        visitor.exit_entity_aspect(self);
    }
}

impl<'a> Visit<'a> for BindingIndication {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_binding_indication(self);
        self.entity_aspect.visit(visitor);
        self.generic_map.visit(visitor);
        self.port_map.visit(visitor);
        visitor.exit_binding_indication(self);
    }
}

impl<'a> Visit<'a> for ComponentSpecification {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_component_specification(self);
        self.instantiation_list.visit(visitor);
        self.component_name.visit(visitor);
        visitor.exit_component_specification(self);
    }
}

impl<'a> Visit<'a> for VUnitBindingIndication {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_v_unit_binding_indication(self);
        self.vunit_list.visit(visitor);
        visitor.exit_v_unit_binding_indication(self);
    }
}

impl<'a> Visit<'a> for ConfigurationSpecification {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_configuration_specification(self);
        self.spec.visit(visitor);
        self.bind_ind.visit(visitor);
        self.vunit_bind_inds.visit(visitor);
        visitor.exit_configuration_specification(self);
    }
}

impl<'a> Visit<'a> for ConfigurationDeclarativeItem {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_configuration_declarative_item(self);
        match self {
            ConfigurationDeclarativeItem::Use(node) => node.visit(visitor),
        }
        visitor.exit_configuration_declarative_item(self);
    }
}

impl<'a> Visit<'a> for ComponentConfiguration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_component_configuration(self);
        self.spec.visit(visitor);
        self.bind_ind.visit(visitor);
        self.vunit_bind_inds.visit(visitor);
        self.block_config.visit(visitor);
        visitor.exit_component_configuration(self);
    }
}

impl<'a> Visit<'a> for ConfigurationItem {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_configuration_item(self);
        match self {
            ConfigurationItem::Block(node) => node.visit(visitor),
            ConfigurationItem::Component(node) => node.visit(visitor),
        }
        visitor.exit_configuration_item(self);
    }
}

impl<'a> Visit<'a> for BlockConfiguration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_block_configuration(self);
        self.block_spec.visit(visitor);
        self.items.visit(visitor);
        visitor.exit_block_configuration(self);
    }
}

impl<'a> Visit<'a> for ConfigurationDeclaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_configuration_declaration(self);
        self.ident.visit(visitor);
        self.entity_name.visit(visitor);
        self.decl.visit(visitor);
        self.vunit_bind_inds.visit(visitor);
        self.block_config.visit(visitor);
        visitor.exit_configuration_declaration(self);
    }
}

impl<'a> Visit<'a> for EntityDeclaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_entity_declaration(self);
        self.ident.visit(visitor);
        self.generic_clause.visit(visitor);
        self.port_clause.visit(visitor);
        self.decl.visit(visitor);
        self.statements.visit(visitor);
        visitor.exit_entity_declaration(self);
    }
}

impl<'a> Visit<'a> for ArchitectureBody {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_architecture_body(self);
        self.ident.visit(visitor);
        self.entity_name.visit(visitor);
        self.decl.visit(visitor);
        self.statements.visit(visitor);
        visitor.exit_architecture_body(self);
    }
}

impl<'a> Visit<'a> for PackageDeclaration {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_package_declaration(self);
        self.ident.visit(visitor);
        self.generic_clause.visit(visitor);
        self.decl.visit(visitor);
        visitor.exit_package_declaration(self);
    }
}

impl<'a> Visit<'a> for PackageBody {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_package_body(self);
        self.ident.visit(visitor);
        self.decl.visit(visitor);
        visitor.exit_package_body(self);
    }
}

impl<'a> Visit<'a> for PrimaryUnit {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_primary_unit(self);
        match self {
            PrimaryUnit::EntityDeclaration(node) => node.visit(visitor),
            PrimaryUnit::Configuration(node) => node.visit(visitor),
            PrimaryUnit::PackageDeclaration(node) => node.visit(visitor),
            PrimaryUnit::PackageInstance(node) => node.visit(visitor),
            PrimaryUnit::ContextDeclaration(node) => node.visit(visitor),
        }
        visitor.exit_primary_unit(self);
    }
}

impl<'a> Visit<'a> for SecondaryUnit {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_secondary_unit(self);
        match self {
            SecondaryUnit::Architecture(node) => node.visit(visitor),
            SecondaryUnit::PackageBody(node) => node.visit(visitor),
        }
        visitor.exit_secondary_unit(self);
    }
}

impl<'a> Visit<'a> for DesignUnit<EntityDeclaration> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_design_unit_entity_declaration(self);
        self.context_clause.visit(visitor);
        self.unit.visit(visitor);
        visitor.exit_design_unit_entity_declaration(self);
    }
}

impl<'a> Visit<'a> for DesignUnit<PackageInstantiation> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_design_unit_package_instantiation(self);
        self.context_clause.visit(visitor);
        self.unit.visit(visitor);
        visitor.exit_design_unit_package_instantiation(self);
    }
}

impl<'a> Visit<'a> for DesignUnit<ConfigurationDeclaration> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_design_unit_configuration_declaration(self);
        self.context_clause.visit(visitor);
        self.unit.visit(visitor);
        visitor.exit_design_unit_configuration_declaration(self);
    }
}

impl<'a> Visit<'a> for DesignUnit<PackageBody> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_design_unit_package_body(self);
        self.context_clause.visit(visitor);
        self.unit.visit(visitor);
        visitor.exit_design_unit_package_body(self);
    }
}

impl<'a> Visit<'a> for DesignUnit<ArchitectureBody> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_design_unit_architecture_body(self);
        self.context_clause.visit(visitor);
        self.unit.visit(visitor);
        visitor.exit_design_unit_architecture_body(self);
    }
}

impl<'a> Visit<'a> for DesignUnit<PackageDeclaration> {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_design_unit_package_declaration(self);
        self.context_clause.visit(visitor);
        self.unit.visit(visitor);
        visitor.exit_design_unit_package_declaration(self);
    }
}

impl<'a> Visit<'a> for AnyDesignUnit {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_any_design_unit(self);
        match self {
            AnyDesignUnit::Primary(node) => node.visit(visitor),
            AnyDesignUnit::Secondary(node) => node.visit(visitor),
        }
        visitor.exit_any_design_unit(self);
    }
}

impl<'a> Visit<'a> for DesignFile {
    fn visit<T: Visitor<'a>>(&self, visitor: &mut T) {
        visitor.enter_design_file(self);
        self.design_units.visit(visitor);
        visitor.exit_design_file(self);
    }
}

// =====================================================================
// TESTS
// ---------------------------------------------------------------------
#[cfg(test)]
mod tests {
    use super::*;
    use crate::design_unit::parse_design_file;
    use crate::test_util::{check_no_messages, Code};
    use std::collections::HashMap;

    fn parse_str(code: &str) -> (Code, DesignFile, Vec<Message>) {
        let code = Code::new(code);
        let mut messages = vec![];
        let design_file = code.with_stream(|stream| parse_design_file(stream, &mut messages));
        (code, design_file, messages)
    }

    fn parse_ok(code: &str) -> (Code, DesignFile) {
        let (code, design_file, messages) = parse_str(code);
        check_no_messages(&messages);
        (code, design_file)
    }

    struct TestVisitor {
        messages: Vec<Message>,
        visits: HashMap<String, u32>,
    }

    impl<'a> TestVisitor {
        pub fn new() -> Self {
            let mut visits = HashMap::new();
            visits.insert(String::from("enter_symbol"), 0);
            visits.insert(String::from("exit_symbol"), 0);
            visits.insert(String::from("enter_attribute_name"), 0);
            visits.insert(String::from("exit_attribute_name"), 0);
            visits.insert(String::from("enter_external_path"), 0);
            visits.insert(String::from("exit_external_path"), 0);
            visits.insert(String::from("enter_external_name"), 0);
            visits.insert(String::from("exit_external_name"), 0);
            visits.insert(String::from("enter_name"), 0);
            visits.insert(String::from("exit_name"), 0);
            visits.insert(String::from("enter_selected_name"), 0);
            visits.insert(String::from("exit_selected_name"), 0);
            visits.insert(String::from("enter_function_call"), 0);
            visits.insert(String::from("exit_function_call"), 0);
            visits.insert(String::from("enter_choice"), 0);
            visits.insert(String::from("exit_choice"), 0);
            visits.insert(String::from("enter_element_association"), 0);
            visits.insert(String::from("exit_element_association"), 0);
            visits.insert(String::from("enter_actual_part"), 0);
            visits.insert(String::from("exit_actual_part"), 0);
            visits.insert(String::from("enter_association_element"), 0);
            visits.insert(String::from("exit_association_element"), 0);
            visits.insert(String::from("enter_abstract_literal"), 0);
            visits.insert(String::from("exit_abstract_literal"), 0);
            visits.insert(String::from("enter_bit_string"), 0);
            visits.insert(String::from("exit_bit_string"), 0);
            visits.insert(String::from("enter_literal"), 0);
            visits.insert(String::from("exit_literal"), 0);
            visits.insert(String::from("enter_allocator"), 0);
            visits.insert(String::from("exit_allocator"), 0);
            visits.insert(String::from("enter_qualified_expression"), 0);
            visits.insert(String::from("exit_qualified_expression"), 0);
            visits.insert(String::from("enter_expression"), 0);
            visits.insert(String::from("exit_expression"), 0);
            visits.insert(String::from("enter_direction"), 0);
            visits.insert(String::from("exit_direction"), 0);
            visits.insert(String::from("enter_discrete_range"), 0);
            visits.insert(String::from("exit_discrete_range"), 0);
            visits.insert(String::from("enter_range_constraint"), 0);
            visits.insert(String::from("exit_range_constraint"), 0);
            visits.insert(String::from("enter_range"), 0);
            visits.insert(String::from("exit_range"), 0);
            visits.insert(String::from("enter_element_constraint"), 0);
            visits.insert(String::from("exit_element_constraint"), 0);
            visits.insert(String::from("enter_subtype_constraint"), 0);
            visits.insert(String::from("exit_subtype_constraint"), 0);
            visits.insert(String::from("enter_record_element_resolution"), 0);
            visits.insert(String::from("exit_record_element_resolution"), 0);
            visits.insert(String::from("enter_resolution_indication"), 0);
            visits.insert(String::from("exit_resolution_indication"), 0);
            visits.insert(String::from("enter_subtype_indication"), 0);
            visits.insert(String::from("exit_subtype_indication"), 0);
            visits.insert(String::from("enter_array_index"), 0);
            visits.insert(String::from("exit_array_index"), 0);
            visits.insert(String::from("enter_element_declaration"), 0);
            visits.insert(String::from("exit_element_declaration"), 0);
            visits.insert(String::from("enter_protected_type_declarative_item"), 0);
            visits.insert(String::from("exit_protected_type_declarative_item"), 0);
            visits.insert(String::from("enter_designator"), 0);
            visits.insert(String::from("exit_designator"), 0);
            visits.insert(String::from("enter_alias_declaration"), 0);
            visits.insert(String::from("exit_alias_declaration"), 0);
            visits.insert(String::from("enter_attribute_declaration"), 0);
            visits.insert(String::from("exit_attribute_declaration"), 0);
            visits.insert(String::from("enter_entity_tag"), 0);
            visits.insert(String::from("exit_entity_tag"), 0);
            visits.insert(String::from("enter_entity_name"), 0);
            visits.insert(String::from("exit_entity_name"), 0);
            visits.insert(String::from("enter_entity_class"), 0);
            visits.insert(String::from("exit_entity_class"), 0);
            visits.insert(String::from("enter_attribute_specification"), 0);
            visits.insert(String::from("exit_attribute_specification"), 0);
            visits.insert(String::from("enter_attribute"), 0);
            visits.insert(String::from("exit_attribute"), 0);
            visits.insert(String::from("enter_protected_type_declaration"), 0);
            visits.insert(String::from("exit_protected_type_declaration"), 0);
            visits.insert(String::from("enter_protected_type_body"), 0);
            visits.insert(String::from("exit_protected_type_body"), 0);
            visits.insert(String::from("enter_physical_type_declaration"), 0);
            visits.insert(String::from("exit_physical_type_declaration"), 0);
            visits.insert(String::from("enter_enumeration_literal"), 0);
            visits.insert(String::from("exit_enumeration_literal"), 0);
            visits.insert(String::from("enter_type_definition"), 0);
            visits.insert(String::from("exit_type_definition"), 0);
            visits.insert(String::from("enter_type_declaration"), 0);
            visits.insert(String::from("exit_type_declaration"), 0);
            visits.insert(String::from("enter_object_class"), 0);
            visits.insert(String::from("exit_object_class"), 0);
            visits.insert(String::from("enter_object_declaration"), 0);
            visits.insert(String::from("exit_object_declaration"), 0);
            visits.insert(String::from("enter_file_declaration"), 0);
            visits.insert(String::from("exit_file_declaration"), 0);
            visits.insert(String::from("enter_subprogram_designator"), 0);
            visits.insert(String::from("exit_subprogram_designator"), 0);
            visits.insert(String::from("enter_procedure_specification"), 0);
            visits.insert(String::from("exit_procedure_specification"), 0);
            visits.insert(String::from("enter_function_specification"), 0);
            visits.insert(String::from("exit_function_specification"), 0);
            visits.insert(String::from("enter_subprogram_body"), 0);
            visits.insert(String::from("exit_subprogram_body"), 0);
            visits.insert(String::from("enter_signature"), 0);
            visits.insert(String::from("exit_signature"), 0);
            visits.insert(String::from("enter_subprogram_declaration"), 0);
            visits.insert(String::from("exit_subprogram_declaration"), 0);
            visits.insert(String::from("enter_interface_file_declaration"), 0);
            visits.insert(String::from("exit_interface_file_declaration"), 0);
            visits.insert(String::from("enter_interface_object_declaration"), 0);
            visits.insert(String::from("exit_interface_object_declaration"), 0);
            visits.insert(String::from("enter_subprogram_default"), 0);
            visits.insert(String::from("exit_subprogram_default"), 0);
            visits.insert(
                String::from("enter_interface_package_generic_map_aspect"),
                0,
            );
            visits.insert(String::from("exit_interface_package_generic_map_aspect"), 0);
            visits.insert(String::from("enter_interface_package_declaration"), 0);
            visits.insert(String::from("exit_interface_package_declaration"), 0);
            visits.insert(String::from("enter_interface_declaration"), 0);
            visits.insert(String::from("exit_interface_declaration"), 0);
            visits.insert(String::from("enter_mode"), 0);
            visits.insert(String::from("exit_mode"), 0);
            visits.insert(String::from("enter_port_clause"), 0);
            visits.insert(String::from("exit_port_clause"), 0);
            visits.insert(String::from("enter_component_declaration"), 0);
            visits.insert(String::from("exit_component_declaration"), 0);
            visits.insert(String::from("enter_declaration"), 0);
            visits.insert(String::from("exit_declaration"), 0);
            visits.insert(String::from("enter_wait_statement"), 0);
            visits.insert(String::from("exit_wait_statement"), 0);
            visits.insert(String::from("enter_assert_statement"), 0);
            visits.insert(String::from("exit_assert_statement"), 0);
            visits.insert(String::from("enter_report_statement"), 0);
            visits.insert(String::from("exit_report_statement"), 0);
            visits.insert(String::from("enter_target"), 0);
            visits.insert(String::from("exit_target"), 0);
            visits.insert(String::from("enter_waveform_element"), 0);
            visits.insert(String::from("exit_waveform_element"), 0);
            visits.insert(String::from("enter_waveform"), 0);
            visits.insert(String::from("exit_waveform"), 0);
            visits.insert(String::from("enter_delay_mechanism"), 0);
            visits.insert(String::from("exit_delay_mechanism"), 0);
            visits.insert(String::from("enter_signal_assignment"), 0);
            visits.insert(String::from("exit_signal_assignment"), 0);
            visits.insert(String::from("enter_variable_assignment"), 0);
            visits.insert(String::from("exit_variable_assignment"), 0);
            visits.insert(String::from("enter_assignment_right_hand_waveform"), 0);
            visits.insert(String::from("exit_assignment_right_hand_waveform"), 0);
            visits.insert(
                String::from("enter_assignment_right_hand_with_pos_expression"),
                0,
            );
            visits.insert(
                String::from("exit_assignment_right_hand_with_pos_expression"),
                0,
            );
            visits.insert(String::from("enter_conditional_expression"), 0);
            visits.insert(String::from("exit_conditional_expression"), 0);
            visits.insert(String::from("enter_conditional_generate_body"), 0);
            visits.insert(String::from("exit_conditional_generate_body"), 0);
            visits.insert(
                String::from("enter_conditional_vec_labeled_sequential_statement"),
                0,
            );
            visits.insert(
                String::from("exit_conditional_vec_labeled_sequential_statement"),
                0,
            );
            visits.insert(String::from("enter_conditional_waveform"), 0);
            visits.insert(String::from("exit_conditional_waveform"), 0);
            visits.insert(String::from("enter_if_generate_statement"), 0);
            visits.insert(String::from("exit_if_generate_statement"), 0);
            visits.insert(String::from("enter_if_statement"), 0);
            visits.insert(String::from("exit_if_statement"), 0);
            visits.insert(String::from("enter_conditional_expressions"), 0);
            visits.insert(String::from("exit_conditional_expressions"), 0);
            visits.insert(String::from("enter_conditionals_waveform"), 0);
            visits.insert(String::from("exit_conditionals_waveform"), 0);
            visits.insert(String::from("enter_alternative_generate_body"), 0);
            visits.insert(String::from("exit_alternative_generate_body"), 0);
            visits.insert(
                String::from("enter_alternative_vec_labeled_sequential_statement"),
                0,
            );
            visits.insert(
                String::from("exit_alternative_vec_labeled_sequential_statement"),
                0,
            );
            visits.insert(String::from("enter_alternative_waveform"), 0);
            visits.insert(String::from("exit_alternative_waveform"), 0);
            visits.insert(String::from("enter_alternative_with_pos_expression"), 0);
            visits.insert(String::from("exit_alternative_with_pos_expression"), 0);
            visits.insert(String::from("enter_case_generate_statement"), 0);
            visits.insert(String::from("exit_case_generate_statement"), 0);
            visits.insert(String::from("enter_case_statement"), 0);
            visits.insert(String::from("exit_case_statement"), 0);
            visits.insert(String::from("enter_selection_waveform"), 0);
            visits.insert(String::from("exit_selection_waveform"), 0);
            visits.insert(String::from("enter_selection_with_pos_expression"), 0);
            visits.insert(String::from("exit_selection_with_pos_expression"), 0);
            visits.insert(String::from("enter_iteration_scheme"), 0);
            visits.insert(String::from("exit_iteration_scheme"), 0);
            visits.insert(String::from("enter_loop_statement"), 0);
            visits.insert(String::from("exit_loop_statement"), 0);
            visits.insert(String::from("enter_next_statement"), 0);
            visits.insert(String::from("exit_next_statement"), 0);
            visits.insert(String::from("enter_exit_statement"), 0);
            visits.insert(String::from("exit_exit_statement"), 0);
            visits.insert(String::from("enter_return_statement"), 0);
            visits.insert(String::from("exit_return_statement"), 0);
            visits.insert(String::from("enter_sequential_statement"), 0);
            visits.insert(String::from("exit_sequential_statement"), 0);
            visits.insert(String::from("enter_labeled_sequential_statement"), 0);
            visits.insert(String::from("exit_labeled_sequential_statement"), 0);
            visits.insert(String::from("enter_block_statement"), 0);
            visits.insert(String::from("exit_block_statement"), 0);
            visits.insert(String::from("enter_sensitivity_list"), 0);
            visits.insert(String::from("exit_sensitivity_list"), 0);
            visits.insert(String::from("enter_process_statement"), 0);
            visits.insert(String::from("exit_process_statement"), 0);
            visits.insert(String::from("enter_concurrent_procedure_call"), 0);
            visits.insert(String::from("exit_concurrent_procedure_call"), 0);
            visits.insert(String::from("enter_concurrent_assert_statement"), 0);
            visits.insert(String::from("exit_concurrent_assert_statement"), 0);
            visits.insert(String::from("enter_concurrent_signal_assignment"), 0);
            visits.insert(String::from("exit_concurrent_signal_assignment"), 0);
            visits.insert(String::from("enter_instantiated_unit"), 0);
            visits.insert(String::from("exit_instantiated_unit"), 0);
            visits.insert(String::from("enter_instantiation_statement"), 0);
            visits.insert(String::from("exit_instantiation_statement"), 0);
            visits.insert(String::from("enter_generate_body"), 0);
            visits.insert(String::from("exit_generate_body"), 0);
            visits.insert(String::from("enter_for_generate_statement"), 0);
            visits.insert(String::from("exit_for_generate_statement"), 0);
            visits.insert(String::from("enter_concurrent_statement"), 0);
            visits.insert(String::from("exit_concurrent_statement"), 0);
            visits.insert(String::from("enter_labeled_concurrent_statement"), 0);
            visits.insert(String::from("exit_labeled_concurrent_statement"), 0);
            visits.insert(String::from("enter_library_clause"), 0);
            visits.insert(String::from("exit_library_clause"), 0);
            visits.insert(String::from("enter_use_clause"), 0);
            visits.insert(String::from("exit_use_clause"), 0);
            visits.insert(String::from("enter_context_reference"), 0);
            visits.insert(String::from("exit_context_reference"), 0);
            visits.insert(String::from("enter_context_item"), 0);
            visits.insert(String::from("exit_context_item"), 0);
            visits.insert(String::from("enter_context_declaration"), 0);
            visits.insert(String::from("exit_context_declaration"), 0);
            visits.insert(String::from("enter_package_instantiation"), 0);
            visits.insert(String::from("exit_package_instantiation"), 0);
            visits.insert(String::from("enter_instantiation_list"), 0);
            visits.insert(String::from("exit_instantiation_list"), 0);
            visits.insert(String::from("enter_entity_aspect"), 0);
            visits.insert(String::from("exit_entity_aspect"), 0);
            visits.insert(String::from("enter_binding_indication"), 0);
            visits.insert(String::from("exit_binding_indication"), 0);
            visits.insert(String::from("enter_component_specification"), 0);
            visits.insert(String::from("exit_component_specification"), 0);
            visits.insert(String::from("enter_v_unit_binding_indication"), 0);
            visits.insert(String::from("exit_v_unit_binding_indication"), 0);
            visits.insert(String::from("enter_configuration_specification"), 0);
            visits.insert(String::from("exit_configuration_specification"), 0);
            visits.insert(String::from("enter_configuration_declarative_item"), 0);
            visits.insert(String::from("exit_configuration_declarative_item"), 0);
            visits.insert(String::from("enter_component_configuration"), 0);
            visits.insert(String::from("exit_component_configuration"), 0);
            visits.insert(String::from("enter_configuration_item"), 0);
            visits.insert(String::from("exit_configuration_item"), 0);
            visits.insert(String::from("enter_block_configuration"), 0);
            visits.insert(String::from("exit_block_configuration"), 0);
            visits.insert(String::from("enter_configuration_declaration"), 0);
            visits.insert(String::from("exit_configuration_declaration"), 0);
            visits.insert(String::from("enter_entity_declaration"), 0);
            visits.insert(String::from("exit_entity_declaration"), 0);
            visits.insert(String::from("enter_architecture_body"), 0);
            visits.insert(String::from("exit_architecture_body"), 0);
            visits.insert(String::from("enter_package_declaration"), 0);
            visits.insert(String::from("exit_package_declaration"), 0);
            visits.insert(String::from("enter_package_body"), 0);
            visits.insert(String::from("exit_package_body"), 0);
            visits.insert(String::from("enter_primary_unit"), 0);
            visits.insert(String::from("exit_primary_unit"), 0);
            visits.insert(String::from("enter_secondary_unit"), 0);
            visits.insert(String::from("exit_secondary_unit"), 0);
            visits.insert(String::from("enter_design_unit_entity_declaration"), 0);
            visits.insert(String::from("exit_design_unit_entity_declaration"), 0);
            visits.insert(String::from("enter_design_unit_package_instantiation"), 0);
            visits.insert(String::from("exit_design_unit_package_instantiation"), 0);
            visits.insert(
                String::from("enter_design_unit_configuration_declaration"),
                0,
            );
            visits.insert(
                String::from("exit_design_unit_configuration_declaration"),
                0,
            );
            visits.insert(String::from("enter_design_unit_package_body"), 0);
            visits.insert(String::from("exit_design_unit_package_body"), 0);
            visits.insert(String::from("enter_design_unit_architecture_body"), 0);
            visits.insert(String::from("exit_design_unit_architecture_body"), 0);
            visits.insert(String::from("enter_design_unit_package_declaration"), 0);
            visits.insert(String::from("exit_design_unit_package_declaration"), 0);
            visits.insert(String::from("enter_any_design_unit"), 0);
            visits.insert(String::from("exit_any_design_unit"), 0);
            visits.insert(String::from("enter_design_file"), 0);
            visits.insert(String::from("exit_design_file"), 0);

            TestVisitor {
                messages: Vec::new(),
                visits: visits,
            }
        }

        fn visits(self) -> HashMap<String, u32> {
            self.visits
        }
    }

    #[allow(unused_variables)]
    impl<'a> Visitor<'a> for TestVisitor {
        // ===================================
        // Results
        // -----------------------------------
        fn messages(&self) -> &Vec<Message> {
            &self.messages
        }

        // ===================================
        // Source position
        // -----------------------------------
        fn enter_src_pos(&mut self, src_pos: &'a SrcPos) {}
        fn exit_src_pos(&mut self, src_pos: &'a SrcPos) {}

        // ===================================
        // AST events
        // -----------------------------------
        fn enter_symbol(&mut self, node: &Symbol) {
            *self.visits.get_mut("enter_symbol").unwrap() += 1;
        }
        fn exit_symbol(&mut self, node: &Symbol) {
            *self.visits.get_mut("exit_symbol").unwrap() += 1;
        }
        fn enter_attribute_name(&mut self, node: &AttributeName) {
            *self.visits.get_mut("enter_attribute_name").unwrap() += 1;
        }
        fn exit_attribute_name(&mut self, node: &AttributeName) {
            *self.visits.get_mut("exit_attribute_name").unwrap() += 1;
        }
        fn enter_external_path(&mut self, node: &ExternalPath) {
            *self.visits.get_mut("enter_external_path").unwrap() += 1;
        }
        fn exit_external_path(&mut self, node: &ExternalPath) {
            *self.visits.get_mut("exit_external_path").unwrap() += 1;
        }
        fn enter_external_name(&mut self, node: &ExternalName) {
            *self.visits.get_mut("enter_external_name").unwrap() += 1;
        }
        fn exit_external_name(&mut self, node: &ExternalName) {
            *self.visits.get_mut("exit_external_name").unwrap() += 1;
        }
        fn enter_name(&mut self, node: &Name) {
            *self.visits.get_mut("enter_name").unwrap() += 1;
        }
        fn exit_name(&mut self, node: &Name) {
            *self.visits.get_mut("exit_name").unwrap() += 1;
        }
        fn enter_selected_name(&mut self, node: &SelectedName) {
            *self.visits.get_mut("enter_selected_name").unwrap() += 1;
        }
        fn exit_selected_name(&mut self, node: &SelectedName) {
            *self.visits.get_mut("exit_selected_name").unwrap() += 1;
        }
        fn enter_function_call(&mut self, node: &FunctionCall) {
            *self.visits.get_mut("enter_function_call").unwrap() += 1;
        }
        fn exit_function_call(&mut self, node: &FunctionCall) {
            *self.visits.get_mut("exit_function_call").unwrap() += 1;
        }
        fn enter_choice(&mut self, node: &Choice) {
            *self.visits.get_mut("enter_choice").unwrap() += 1;
        }
        fn exit_choice(&mut self, node: &Choice) {
            *self.visits.get_mut("exit_choice").unwrap() += 1;
        }
        fn enter_element_association(&mut self, node: &ElementAssociation) {
            *self.visits.get_mut("enter_element_association").unwrap() += 1;
        }
        fn exit_element_association(&mut self, node: &ElementAssociation) {
            *self.visits.get_mut("exit_element_association").unwrap() += 1;
        }
        fn enter_actual_part(&mut self, node: &ActualPart) {
            *self.visits.get_mut("enter_actual_part").unwrap() += 1;
        }
        fn exit_actual_part(&mut self, node: &ActualPart) {
            *self.visits.get_mut("exit_actual_part").unwrap() += 1;
        }
        fn enter_association_element(&mut self, node: &AssociationElement) {
            *self.visits.get_mut("enter_association_element").unwrap() += 1;
        }
        fn exit_association_element(&mut self, node: &AssociationElement) {
            *self.visits.get_mut("exit_association_element").unwrap() += 1;
        }
        fn enter_abstract_literal(&mut self, node: &AbstractLiteral) {
            *self.visits.get_mut("enter_abstract_literal").unwrap() += 1;
        }
        fn exit_abstract_literal(&mut self, node: &AbstractLiteral) {
            *self.visits.get_mut("exit_abstract_literal").unwrap() += 1;
        }
        fn enter_bit_string(&mut self, node: &BitString) {
            *self.visits.get_mut("enter_bit_string").unwrap() += 1;
        }
        fn exit_bit_string(&mut self, node: &BitString) {
            *self.visits.get_mut("exit_bit_string").unwrap() += 1;
        }
        fn enter_literal(&mut self, node: &Literal) {
            *self.visits.get_mut("enter_literal").unwrap() += 1;
        }
        fn exit_literal(&mut self, node: &Literal) {
            *self.visits.get_mut("exit_literal").unwrap() += 1;
        }
        fn enter_allocator(&mut self, node: &Allocator) {
            *self.visits.get_mut("enter_allocator").unwrap() += 1;
        }
        fn exit_allocator(&mut self, node: &Allocator) {
            *self.visits.get_mut("exit_allocator").unwrap() += 1;
        }
        fn enter_qualified_expression(&mut self, node: &QualifiedExpression) {
            *self.visits.get_mut("enter_qualified_expression").unwrap() += 1;
        }
        fn exit_qualified_expression(&mut self, node: &QualifiedExpression) {
            *self.visits.get_mut("exit_qualified_expression").unwrap() += 1;
        }
        fn enter_expression(&mut self, node: &Expression) {
            *self.visits.get_mut("enter_expression").unwrap() += 1;
        }
        fn exit_expression(&mut self, node: &Expression) {
            *self.visits.get_mut("exit_expression").unwrap() += 1;
        }
        fn enter_direction(&mut self, node: &Direction) {
            *self.visits.get_mut("enter_direction").unwrap() += 1;
        }
        fn exit_direction(&mut self, node: &Direction) {
            *self.visits.get_mut("exit_direction").unwrap() += 1;
        }
        fn enter_discrete_range(&mut self, node: &DiscreteRange) {
            *self.visits.get_mut("enter_discrete_range").unwrap() += 1;
        }
        fn exit_discrete_range(&mut self, node: &DiscreteRange) {
            *self.visits.get_mut("exit_discrete_range").unwrap() += 1;
        }
        fn enter_range_constraint(&mut self, node: &RangeConstraint) {
            *self.visits.get_mut("enter_range_constraint").unwrap() += 1;
        }
        fn exit_range_constraint(&mut self, node: &RangeConstraint) {
            *self.visits.get_mut("exit_range_constraint").unwrap() += 1;
        }
        fn enter_range(&mut self, node: &Range) {
            *self.visits.get_mut("enter_range").unwrap() += 1;
        }
        fn exit_range(&mut self, node: &Range) {
            *self.visits.get_mut("exit_range").unwrap() += 1;
        }
        fn enter_element_constraint(&mut self, node: &ElementConstraint) {
            *self.visits.get_mut("enter_element_constraint").unwrap() += 1;
        }
        fn exit_element_constraint(&mut self, node: &ElementConstraint) {
            *self.visits.get_mut("exit_element_constraint").unwrap() += 1;
        }
        fn enter_subtype_constraint(&mut self, node: &SubtypeConstraint) {
            *self.visits.get_mut("enter_subtype_constraint").unwrap() += 1;
        }
        fn exit_subtype_constraint(&mut self, node: &SubtypeConstraint) {
            *self.visits.get_mut("exit_subtype_constraint").unwrap() += 1;
        }
        fn enter_record_element_resolution(&mut self, node: &RecordElementResolution) {
            *self
                .visits
                .get_mut("enter_record_element_resolution")
                .unwrap() += 1;
        }
        fn exit_record_element_resolution(&mut self, node: &RecordElementResolution) {
            *self
                .visits
                .get_mut("exit_record_element_resolution")
                .unwrap() += 1;
        }
        fn enter_resolution_indication(&mut self, node: &ResolutionIndication) {
            *self.visits.get_mut("enter_resolution_indication").unwrap() += 1;
        }
        fn exit_resolution_indication(&mut self, node: &ResolutionIndication) {
            *self.visits.get_mut("exit_resolution_indication").unwrap() += 1;
        }
        fn enter_subtype_indication(&mut self, node: &SubtypeIndication) {
            *self.visits.get_mut("enter_subtype_indication").unwrap() += 1;
        }
        fn exit_subtype_indication(&mut self, node: &SubtypeIndication) {
            *self.visits.get_mut("exit_subtype_indication").unwrap() += 1;
        }
        fn enter_array_index(&mut self, node: &ArrayIndex) {
            *self.visits.get_mut("enter_array_index").unwrap() += 1;
        }
        fn exit_array_index(&mut self, node: &ArrayIndex) {
            *self.visits.get_mut("exit_array_index").unwrap() += 1;
        }
        fn enter_element_declaration(&mut self, node: &ElementDeclaration) {
            *self.visits.get_mut("enter_element_declaration").unwrap() += 1;
        }
        fn exit_element_declaration(&mut self, node: &ElementDeclaration) {
            *self.visits.get_mut("exit_element_declaration").unwrap() += 1;
        }
        fn enter_protected_type_declarative_item(&mut self, node: &ProtectedTypeDeclarativeItem) {
            *self
                .visits
                .get_mut("enter_protected_type_declarative_item")
                .unwrap() += 1;
        }
        fn exit_protected_type_declarative_item(&mut self, node: &ProtectedTypeDeclarativeItem) {
            *self
                .visits
                .get_mut("exit_protected_type_declarative_item")
                .unwrap() += 1;
        }
        fn enter_designator(&mut self, node: &Designator) {
            *self.visits.get_mut("enter_designator").unwrap() += 1;
        }
        fn exit_designator(&mut self, node: &Designator) {
            *self.visits.get_mut("exit_designator").unwrap() += 1;
        }
        fn enter_alias_declaration(&mut self, node: &AliasDeclaration) {
            *self.visits.get_mut("enter_alias_declaration").unwrap() += 1;
        }
        fn exit_alias_declaration(&mut self, node: &AliasDeclaration) {
            *self.visits.get_mut("exit_alias_declaration").unwrap() += 1;
        }
        fn enter_attribute_declaration(&mut self, node: &AttributeDeclaration) {
            *self.visits.get_mut("enter_attribute_declaration").unwrap() += 1;
        }
        fn exit_attribute_declaration(&mut self, node: &AttributeDeclaration) {
            *self.visits.get_mut("exit_attribute_declaration").unwrap() += 1;
        }
        fn enter_entity_tag(&mut self, node: &EntityTag) {
            *self.visits.get_mut("enter_entity_tag").unwrap() += 1;
        }
        fn exit_entity_tag(&mut self, node: &EntityTag) {
            *self.visits.get_mut("exit_entity_tag").unwrap() += 1;
        }
        fn enter_entity_name(&mut self, node: &EntityName) {
            *self.visits.get_mut("enter_entity_name").unwrap() += 1;
        }
        fn exit_entity_name(&mut self, node: &EntityName) {
            *self.visits.get_mut("exit_entity_name").unwrap() += 1;
        }
        fn enter_entity_class(&mut self, node: &EntityClass) {
            *self.visits.get_mut("enter_entity_class").unwrap() += 1;
        }
        fn exit_entity_class(&mut self, node: &EntityClass) {
            *self.visits.get_mut("exit_entity_class").unwrap() += 1;
        }
        fn enter_attribute_specification(&mut self, node: &AttributeSpecification) {
            *self
                .visits
                .get_mut("enter_attribute_specification")
                .unwrap() += 1;
        }
        fn exit_attribute_specification(&mut self, node: &AttributeSpecification) {
            *self.visits.get_mut("exit_attribute_specification").unwrap() += 1;
        }
        fn enter_attribute(&mut self, node: &Attribute) {
            *self.visits.get_mut("enter_attribute").unwrap() += 1;
        }
        fn exit_attribute(&mut self, node: &Attribute) {
            *self.visits.get_mut("exit_attribute").unwrap() += 1;
        }
        fn enter_protected_type_declaration(&mut self, node: &ProtectedTypeDeclaration) {
            *self
                .visits
                .get_mut("enter_protected_type_declaration")
                .unwrap() += 1;
        }
        fn exit_protected_type_declaration(&mut self, node: &ProtectedTypeDeclaration) {
            *self
                .visits
                .get_mut("exit_protected_type_declaration")
                .unwrap() += 1;
        }
        fn enter_protected_type_body(&mut self, node: &ProtectedTypeBody) {
            *self.visits.get_mut("enter_protected_type_body").unwrap() += 1;
        }
        fn exit_protected_type_body(&mut self, node: &ProtectedTypeBody) {
            *self.visits.get_mut("exit_protected_type_body").unwrap() += 1;
        }
        fn enter_physical_type_declaration(&mut self, node: &PhysicalTypeDeclaration) {
            *self
                .visits
                .get_mut("enter_physical_type_declaration")
                .unwrap() += 1;
        }
        fn exit_physical_type_declaration(&mut self, node: &PhysicalTypeDeclaration) {
            *self
                .visits
                .get_mut("exit_physical_type_declaration")
                .unwrap() += 1;
        }
        fn enter_enumeration_literal(&mut self, node: &EnumerationLiteral) {
            *self.visits.get_mut("enter_enumeration_literal").unwrap() += 1;
        }
        fn exit_enumeration_literal(&mut self, node: &EnumerationLiteral) {
            *self.visits.get_mut("exit_enumeration_literal").unwrap() += 1;
        }
        fn enter_type_definition(&mut self, node: &TypeDefinition) {
            *self.visits.get_mut("enter_type_definition").unwrap() += 1;
        }
        fn exit_type_definition(&mut self, node: &TypeDefinition) {
            *self.visits.get_mut("exit_type_definition").unwrap() += 1;
        }
        fn enter_type_declaration(&mut self, node: &TypeDeclaration) {
            *self.visits.get_mut("enter_type_declaration").unwrap() += 1;
        }
        fn exit_type_declaration(&mut self, node: &TypeDeclaration) {
            *self.visits.get_mut("exit_type_declaration").unwrap() += 1;
        }
        fn enter_object_class(&mut self, node: &ObjectClass) {
            *self.visits.get_mut("enter_object_class").unwrap() += 1;
        }
        fn exit_object_class(&mut self, node: &ObjectClass) {
            *self.visits.get_mut("exit_object_class").unwrap() += 1;
        }
        fn enter_object_declaration(&mut self, node: &ObjectDeclaration) {
            *self.visits.get_mut("enter_object_declaration").unwrap() += 1;
        }
        fn exit_object_declaration(&mut self, node: &ObjectDeclaration) {
            *self.visits.get_mut("exit_object_declaration").unwrap() += 1;
        }
        fn enter_file_declaration(&mut self, node: &FileDeclaration) {
            *self.visits.get_mut("enter_file_declaration").unwrap() += 1;
        }
        fn exit_file_declaration(&mut self, node: &FileDeclaration) {
            *self.visits.get_mut("exit_file_declaration").unwrap() += 1;
        }
        fn enter_subprogram_designator(&mut self, node: &SubprogramDesignator) {
            *self.visits.get_mut("enter_subprogram_designator").unwrap() += 1;
        }
        fn exit_subprogram_designator(&mut self, node: &SubprogramDesignator) {
            *self.visits.get_mut("exit_subprogram_designator").unwrap() += 1;
        }
        fn enter_procedure_specification(&mut self, node: &ProcedureSpecification) {
            *self
                .visits
                .get_mut("enter_procedure_specification")
                .unwrap() += 1;
        }
        fn exit_procedure_specification(&mut self, node: &ProcedureSpecification) {
            *self.visits.get_mut("exit_procedure_specification").unwrap() += 1;
        }
        fn enter_function_specification(&mut self, node: &FunctionSpecification) {
            *self.visits.get_mut("enter_function_specification").unwrap() += 1;
        }
        fn exit_function_specification(&mut self, node: &FunctionSpecification) {
            *self.visits.get_mut("exit_function_specification").unwrap() += 1;
        }
        fn enter_subprogram_body(&mut self, node: &SubprogramBody) {
            *self.visits.get_mut("enter_subprogram_body").unwrap() += 1;
        }
        fn exit_subprogram_body(&mut self, node: &SubprogramBody) {
            *self.visits.get_mut("exit_subprogram_body").unwrap() += 1;
        }
        fn enter_signature(&mut self, node: &Signature) {
            *self.visits.get_mut("enter_signature").unwrap() += 1;
        }
        fn exit_signature(&mut self, node: &Signature) {
            *self.visits.get_mut("exit_signature").unwrap() += 1;
        }
        fn enter_subprogram_declaration(&mut self, node: &SubprogramDeclaration) {
            *self.visits.get_mut("enter_subprogram_declaration").unwrap() += 1;
        }
        fn exit_subprogram_declaration(&mut self, node: &SubprogramDeclaration) {
            *self.visits.get_mut("exit_subprogram_declaration").unwrap() += 1;
        }
        fn enter_interface_file_declaration(&mut self, node: &InterfaceFileDeclaration) {
            *self
                .visits
                .get_mut("enter_interface_file_declaration")
                .unwrap() += 1;
        }
        fn exit_interface_file_declaration(&mut self, node: &InterfaceFileDeclaration) {
            *self
                .visits
                .get_mut("exit_interface_file_declaration")
                .unwrap() += 1;
        }
        fn enter_interface_object_declaration(&mut self, node: &InterfaceObjectDeclaration) {
            *self
                .visits
                .get_mut("enter_interface_object_declaration")
                .unwrap() += 1;
        }
        fn exit_interface_object_declaration(&mut self, node: &InterfaceObjectDeclaration) {
            *self
                .visits
                .get_mut("exit_interface_object_declaration")
                .unwrap() += 1;
        }
        fn enter_subprogram_default(&mut self, node: &SubprogramDefault) {
            *self.visits.get_mut("enter_subprogram_default").unwrap() += 1;
        }
        fn exit_subprogram_default(&mut self, node: &SubprogramDefault) {
            *self.visits.get_mut("exit_subprogram_default").unwrap() += 1;
        }
        fn enter_interface_package_generic_map_aspect(
            &mut self,
            node: &InterfacePackageGenericMapAspect,
        ) {
            *self
                .visits
                .get_mut("enter_interface_package_generic_map_aspect")
                .unwrap() += 1;
        }
        fn exit_interface_package_generic_map_aspect(
            &mut self,
            node: &InterfacePackageGenericMapAspect,
        ) {
            *self
                .visits
                .get_mut("exit_interface_package_generic_map_aspect")
                .unwrap() += 1;
        }
        fn enter_interface_package_declaration(&mut self, node: &InterfacePackageDeclaration) {
            *self
                .visits
                .get_mut("enter_interface_package_declaration")
                .unwrap() += 1;
        }
        fn exit_interface_package_declaration(&mut self, node: &InterfacePackageDeclaration) {
            *self
                .visits
                .get_mut("exit_interface_package_declaration")
                .unwrap() += 1;
        }
        fn enter_interface_declaration(&mut self, node: &InterfaceDeclaration) {
            *self.visits.get_mut("enter_interface_declaration").unwrap() += 1;
        }
        fn exit_interface_declaration(&mut self, node: &InterfaceDeclaration) {
            *self.visits.get_mut("exit_interface_declaration").unwrap() += 1;
        }
        fn enter_mode(&mut self, node: &Mode) {
            *self.visits.get_mut("enter_mode").unwrap() += 1;
        }
        fn exit_mode(&mut self, node: &Mode) {
            *self.visits.get_mut("exit_mode").unwrap() += 1;
        }
        fn enter_port_clause(&mut self, node: &PortClause) {
            *self.visits.get_mut("enter_port_clause").unwrap() += 1;
        }
        fn exit_port_clause(&mut self, node: &PortClause) {
            *self.visits.get_mut("exit_port_clause").unwrap() += 1;
        }
        fn enter_component_declaration(&mut self, node: &ComponentDeclaration) {
            *self.visits.get_mut("enter_component_declaration").unwrap() += 1;
        }
        fn exit_component_declaration(&mut self, node: &ComponentDeclaration) {
            *self.visits.get_mut("exit_component_declaration").unwrap() += 1;
        }
        fn enter_declaration(&mut self, node: &Declaration) {
            *self.visits.get_mut("enter_declaration").unwrap() += 1;
        }
        fn exit_declaration(&mut self, node: &Declaration) {
            *self.visits.get_mut("exit_declaration").unwrap() += 1;
        }
        fn enter_wait_statement(&mut self, node: &WaitStatement) {
            *self.visits.get_mut("enter_wait_statement").unwrap() += 1;
        }
        fn exit_wait_statement(&mut self, node: &WaitStatement) {
            *self.visits.get_mut("exit_wait_statement").unwrap() += 1;
        }
        fn enter_assert_statement(&mut self, node: &AssertStatement) {
            *self.visits.get_mut("enter_assert_statement").unwrap() += 1;
        }
        fn exit_assert_statement(&mut self, node: &AssertStatement) {
            *self.visits.get_mut("exit_assert_statement").unwrap() += 1;
        }
        fn enter_report_statement(&mut self, node: &ReportStatement) {
            *self.visits.get_mut("enter_report_statement").unwrap() += 1;
        }
        fn exit_report_statement(&mut self, node: &ReportStatement) {
            *self.visits.get_mut("exit_report_statement").unwrap() += 1;
        }
        fn enter_target(&mut self, node: &Target) {
            *self.visits.get_mut("enter_target").unwrap() += 1;
        }
        fn exit_target(&mut self, node: &Target) {
            *self.visits.get_mut("exit_target").unwrap() += 1;
        }
        fn enter_waveform_element(&mut self, node: &WaveformElement) {
            *self.visits.get_mut("enter_waveform_element").unwrap() += 1;
        }
        fn exit_waveform_element(&mut self, node: &WaveformElement) {
            *self.visits.get_mut("exit_waveform_element").unwrap() += 1;
        }
        fn enter_waveform(&mut self, node: &Waveform) {
            *self.visits.get_mut("enter_waveform").unwrap() += 1;
        }
        fn exit_waveform(&mut self, node: &Waveform) {
            *self.visits.get_mut("exit_waveform").unwrap() += 1;
        }
        fn enter_delay_mechanism(&mut self, node: &DelayMechanism) {
            *self.visits.get_mut("enter_delay_mechanism").unwrap() += 1;
        }
        fn exit_delay_mechanism(&mut self, node: &DelayMechanism) {
            *self.visits.get_mut("exit_delay_mechanism").unwrap() += 1;
        }
        fn enter_signal_assignment(&mut self, node: &SignalAssignment) {
            *self.visits.get_mut("enter_signal_assignment").unwrap() += 1;
        }
        fn exit_signal_assignment(&mut self, node: &SignalAssignment) {
            *self.visits.get_mut("exit_signal_assignment").unwrap() += 1;
        }
        fn enter_variable_assignment(&mut self, node: &VariableAssignment) {
            *self.visits.get_mut("enter_variable_assignment").unwrap() += 1;
        }
        fn exit_variable_assignment(&mut self, node: &VariableAssignment) {
            *self.visits.get_mut("exit_variable_assignment").unwrap() += 1;
        }
        fn enter_assignment_right_hand_waveform(&mut self, node: &AssignmentRightHand<Waveform>) {
            *self
                .visits
                .get_mut("enter_assignment_right_hand_waveform")
                .unwrap() += 1;
        }
        fn exit_assignment_right_hand_waveform(&mut self, node: &AssignmentRightHand<Waveform>) {
            *self
                .visits
                .get_mut("exit_assignment_right_hand_waveform")
                .unwrap() += 1;
        }
        fn enter_assignment_right_hand_with_pos_expression(
            &mut self,
            node: &AssignmentRightHand<WithPos<Expression>>,
        ) {
            *self
                .visits
                .get_mut("enter_assignment_right_hand_with_pos_expression")
                .unwrap() += 1;
        }
        fn exit_assignment_right_hand_with_pos_expression(
            &mut self,
            node: &AssignmentRightHand<WithPos<Expression>>,
        ) {
            *self
                .visits
                .get_mut("exit_assignment_right_hand_with_pos_expression")
                .unwrap() += 1;
        }
        fn enter_conditional_expression(&mut self, node: &ConditionalExpression) {
            *self.visits.get_mut("enter_conditional_expression").unwrap() += 1;
        }
        fn exit_conditional_expression(&mut self, node: &ConditionalExpression) {
            *self.visits.get_mut("exit_conditional_expression").unwrap() += 1;
        }
        fn enter_conditional_generate_body(&mut self, node: &Conditional<GenerateBody>) {
            *self
                .visits
                .get_mut("enter_conditional_generate_body")
                .unwrap() += 1;
        }
        fn exit_conditional_generate_body(&mut self, node: &Conditional<GenerateBody>) {
            *self
                .visits
                .get_mut("exit_conditional_generate_body")
                .unwrap() += 1;
        }
        fn enter_conditional_vec_labeled_sequential_statement(
            &mut self,
            node: &Conditional<Vec<LabeledSequentialStatement>>,
        ) {
            *self
                .visits
                .get_mut("enter_conditional_vec_labeled_sequential_statement")
                .unwrap() += 1;
        }
        fn exit_conditional_vec_labeled_sequential_statement(
            &mut self,
            node: &Conditional<Vec<LabeledSequentialStatement>>,
        ) {
            *self
                .visits
                .get_mut("exit_conditional_vec_labeled_sequential_statement")
                .unwrap() += 1;
        }
        fn enter_conditional_waveform(&mut self, node: &Conditional<Waveform>) {
            *self.visits.get_mut("enter_conditional_waveform").unwrap() += 1;
        }
        fn exit_conditional_waveform(&mut self, node: &Conditional<Waveform>) {
            *self.visits.get_mut("exit_conditional_waveform").unwrap() += 1;
        }
        fn enter_if_generate_statement(&mut self, node: &IfGenerateStatement) {
            *self.visits.get_mut("enter_if_generate_statement").unwrap() += 1;
        }
        fn exit_if_generate_statement(&mut self, node: &IfGenerateStatement) {
            *self.visits.get_mut("exit_if_generate_statement").unwrap() += 1;
        }
        fn enter_if_statement(&mut self, node: &IfStatement) {
            *self.visits.get_mut("enter_if_statement").unwrap() += 1;
        }
        fn exit_if_statement(&mut self, node: &IfStatement) {
            *self.visits.get_mut("exit_if_statement").unwrap() += 1;
        }
        fn enter_conditional_expressions(&mut self, node: &ConditionalExpressions) {
            *self
                .visits
                .get_mut("enter_conditional_expressions")
                .unwrap() += 1;
        }
        fn exit_conditional_expressions(&mut self, node: &ConditionalExpressions) {
            *self.visits.get_mut("exit_conditional_expressions").unwrap() += 1;
        }
        fn enter_conditionals_waveform(&mut self, node: &Conditionals<Waveform>) {
            *self.visits.get_mut("enter_conditionals_waveform").unwrap() += 1;
        }
        fn exit_conditionals_waveform(&mut self, node: &Conditionals<Waveform>) {
            *self.visits.get_mut("exit_conditionals_waveform").unwrap() += 1;
        }
        fn enter_alternative_generate_body(&mut self, node: &Alternative<GenerateBody>) {
            *self
                .visits
                .get_mut("enter_alternative_generate_body")
                .unwrap() += 1;
        }
        fn exit_alternative_generate_body(&mut self, node: &Alternative<GenerateBody>) {
            *self
                .visits
                .get_mut("exit_alternative_generate_body")
                .unwrap() += 1;
        }
        fn enter_alternative_vec_labeled_sequential_statement(
            &mut self,
            node: &Alternative<Vec<LabeledSequentialStatement>>,
        ) {
            *self
                .visits
                .get_mut("enter_alternative_vec_labeled_sequential_statement")
                .unwrap() += 1;
        }
        fn exit_alternative_vec_labeled_sequential_statement(
            &mut self,
            node: &Alternative<Vec<LabeledSequentialStatement>>,
        ) {
            *self
                .visits
                .get_mut("exit_alternative_vec_labeled_sequential_statement")
                .unwrap() += 1;
        }
        fn enter_alternative_waveform(&mut self, node: &Alternative<Waveform>) {
            *self.visits.get_mut("enter_alternative_waveform").unwrap() += 1;
        }
        fn exit_alternative_waveform(&mut self, node: &Alternative<Waveform>) {
            *self.visits.get_mut("exit_alternative_waveform").unwrap() += 1;
        }
        fn enter_alternative_with_pos_expression(
            &mut self,
            node: &Alternative<WithPos<Expression>>,
        ) {
            *self
                .visits
                .get_mut("enter_alternative_with_pos_expression")
                .unwrap() += 1;
        }
        fn exit_alternative_with_pos_expression(
            &mut self,
            node: &Alternative<WithPos<Expression>>,
        ) {
            *self
                .visits
                .get_mut("exit_alternative_with_pos_expression")
                .unwrap() += 1;
        }
        fn enter_case_generate_statement(&mut self, node: &CaseGenerateStatement) {
            *self
                .visits
                .get_mut("enter_case_generate_statement")
                .unwrap() += 1;
        }
        fn exit_case_generate_statement(&mut self, node: &CaseGenerateStatement) {
            *self.visits.get_mut("exit_case_generate_statement").unwrap() += 1;
        }
        fn enter_case_statement(&mut self, node: &CaseStatement) {
            *self.visits.get_mut("enter_case_statement").unwrap() += 1;
        }
        fn exit_case_statement(&mut self, node: &CaseStatement) {
            *self.visits.get_mut("exit_case_statement").unwrap() += 1;
        }
        fn enter_selection_waveform(&mut self, node: &Selection<Waveform>) {
            *self.visits.get_mut("enter_selection_waveform").unwrap() += 1;
        }
        fn exit_selection_waveform(&mut self, node: &Selection<Waveform>) {
            *self.visits.get_mut("exit_selection_waveform").unwrap() += 1;
        }
        fn enter_selection_with_pos_expression(&mut self, node: &Selection<WithPos<Expression>>) {
            *self
                .visits
                .get_mut("enter_selection_with_pos_expression")
                .unwrap() += 1;
        }
        fn exit_selection_with_pos_expression(&mut self, node: &Selection<WithPos<Expression>>) {
            *self
                .visits
                .get_mut("exit_selection_with_pos_expression")
                .unwrap() += 1;
        }
        fn enter_iteration_scheme(&mut self, node: &IterationScheme) {
            *self.visits.get_mut("enter_iteration_scheme").unwrap() += 1;
        }
        fn exit_iteration_scheme(&mut self, node: &IterationScheme) {
            *self.visits.get_mut("exit_iteration_scheme").unwrap() += 1;
        }
        fn enter_loop_statement(&mut self, node: &LoopStatement) {
            *self.visits.get_mut("enter_loop_statement").unwrap() += 1;
        }
        fn exit_loop_statement(&mut self, node: &LoopStatement) {
            *self.visits.get_mut("exit_loop_statement").unwrap() += 1;
        }
        fn enter_next_statement(&mut self, node: &NextStatement) {
            *self.visits.get_mut("enter_next_statement").unwrap() += 1;
        }
        fn exit_next_statement(&mut self, node: &NextStatement) {
            *self.visits.get_mut("exit_next_statement").unwrap() += 1;
        }
        fn enter_exit_statement(&mut self, node: &ExitStatement) {
            *self.visits.get_mut("enter_exit_statement").unwrap() += 1;
        }
        fn exit_exit_statement(&mut self, node: &ExitStatement) {
            *self.visits.get_mut("exit_exit_statement").unwrap() += 1;
        }
        fn enter_return_statement(&mut self, node: &ReturnStatement) {
            *self.visits.get_mut("enter_return_statement").unwrap() += 1;
        }
        fn exit_return_statement(&mut self, node: &ReturnStatement) {
            *self.visits.get_mut("exit_return_statement").unwrap() += 1;
        }
        fn enter_sequential_statement(&mut self, node: &SequentialStatement) {
            *self.visits.get_mut("enter_sequential_statement").unwrap() += 1;
        }
        fn exit_sequential_statement(&mut self, node: &SequentialStatement) {
            *self.visits.get_mut("exit_sequential_statement").unwrap() += 1;
        }
        fn enter_labeled_sequential_statement(&mut self, node: &LabeledSequentialStatement) {
            *self
                .visits
                .get_mut("enter_labeled_sequential_statement")
                .unwrap() += 1;
        }
        fn exit_labeled_sequential_statement(&mut self, node: &LabeledSequentialStatement) {
            *self
                .visits
                .get_mut("exit_labeled_sequential_statement")
                .unwrap() += 1;
        }
        fn enter_block_statement(&mut self, node: &BlockStatement) {
            *self.visits.get_mut("enter_block_statement").unwrap() += 1;
        }
        fn exit_block_statement(&mut self, node: &BlockStatement) {
            *self.visits.get_mut("exit_block_statement").unwrap() += 1;
        }
        fn enter_sensitivity_list(&mut self, node: &SensitivityList) {
            *self.visits.get_mut("enter_sensitivity_list").unwrap() += 1;
        }
        fn exit_sensitivity_list(&mut self, node: &SensitivityList) {
            *self.visits.get_mut("exit_sensitivity_list").unwrap() += 1;
        }
        fn enter_process_statement(&mut self, node: &ProcessStatement) {
            *self.visits.get_mut("enter_process_statement").unwrap() += 1;
        }
        fn exit_process_statement(&mut self, node: &ProcessStatement) {
            *self.visits.get_mut("exit_process_statement").unwrap() += 1;
        }
        fn enter_concurrent_procedure_call(&mut self, node: &ConcurrentProcedureCall) {
            *self
                .visits
                .get_mut("enter_concurrent_procedure_call")
                .unwrap() += 1;
        }
        fn exit_concurrent_procedure_call(&mut self, node: &ConcurrentProcedureCall) {
            *self
                .visits
                .get_mut("exit_concurrent_procedure_call")
                .unwrap() += 1;
        }
        fn enter_concurrent_assert_statement(&mut self, node: &ConcurrentAssertStatement) {
            *self
                .visits
                .get_mut("enter_concurrent_assert_statement")
                .unwrap() += 1;
        }
        fn exit_concurrent_assert_statement(&mut self, node: &ConcurrentAssertStatement) {
            *self
                .visits
                .get_mut("exit_concurrent_assert_statement")
                .unwrap() += 1;
        }
        fn enter_concurrent_signal_assignment(&mut self, node: &ConcurrentSignalAssignment) {
            *self
                .visits
                .get_mut("enter_concurrent_signal_assignment")
                .unwrap() += 1;
        }
        fn exit_concurrent_signal_assignment(&mut self, node: &ConcurrentSignalAssignment) {
            *self
                .visits
                .get_mut("exit_concurrent_signal_assignment")
                .unwrap() += 1;
        }
        fn enter_instantiated_unit(&mut self, node: &InstantiatedUnit) {
            *self.visits.get_mut("enter_instantiated_unit").unwrap() += 1;
        }
        fn exit_instantiated_unit(&mut self, node: &InstantiatedUnit) {
            *self.visits.get_mut("exit_instantiated_unit").unwrap() += 1;
        }
        fn enter_instantiation_statement(&mut self, node: &InstantiationStatement) {
            *self
                .visits
                .get_mut("enter_instantiation_statement")
                .unwrap() += 1;
        }
        fn exit_instantiation_statement(&mut self, node: &InstantiationStatement) {
            *self.visits.get_mut("exit_instantiation_statement").unwrap() += 1;
        }
        fn enter_generate_body(&mut self, node: &GenerateBody) {
            *self.visits.get_mut("enter_generate_body").unwrap() += 1;
        }
        fn exit_generate_body(&mut self, node: &GenerateBody) {
            *self.visits.get_mut("exit_generate_body").unwrap() += 1;
        }
        fn enter_for_generate_statement(&mut self, node: &ForGenerateStatement) {
            *self.visits.get_mut("enter_for_generate_statement").unwrap() += 1;
        }
        fn exit_for_generate_statement(&mut self, node: &ForGenerateStatement) {
            *self.visits.get_mut("exit_for_generate_statement").unwrap() += 1;
        }
        fn enter_concurrent_statement(&mut self, node: &ConcurrentStatement) {
            *self.visits.get_mut("enter_concurrent_statement").unwrap() += 1;
        }
        fn exit_concurrent_statement(&mut self, node: &ConcurrentStatement) {
            *self.visits.get_mut("exit_concurrent_statement").unwrap() += 1;
        }
        fn enter_labeled_concurrent_statement(&mut self, node: &LabeledConcurrentStatement) {
            *self
                .visits
                .get_mut("enter_labeled_concurrent_statement")
                .unwrap() += 1;
        }
        fn exit_labeled_concurrent_statement(&mut self, node: &LabeledConcurrentStatement) {
            *self
                .visits
                .get_mut("exit_labeled_concurrent_statement")
                .unwrap() += 1;
        }
        fn enter_library_clause(&mut self, node: &LibraryClause) {
            *self.visits.get_mut("enter_library_clause").unwrap() += 1;
        }
        fn exit_library_clause(&mut self, node: &LibraryClause) {
            *self.visits.get_mut("exit_library_clause").unwrap() += 1;
        }
        fn enter_use_clause(&mut self, node: &UseClause) {
            *self.visits.get_mut("enter_use_clause").unwrap() += 1;
        }
        fn exit_use_clause(&mut self, node: &UseClause) {
            *self.visits.get_mut("exit_use_clause").unwrap() += 1;
        }
        fn enter_context_reference(&mut self, node: &ContextReference) {
            *self.visits.get_mut("enter_context_reference").unwrap() += 1;
        }
        fn exit_context_reference(&mut self, node: &ContextReference) {
            *self.visits.get_mut("exit_context_reference").unwrap() += 1;
        }
        fn enter_context_item(&mut self, node: &ContextItem) {
            *self.visits.get_mut("enter_context_item").unwrap() += 1;
        }
        fn exit_context_item(&mut self, node: &ContextItem) {
            *self.visits.get_mut("exit_context_item").unwrap() += 1;
        }
        fn enter_context_declaration(&mut self, node: &ContextDeclaration) {
            *self.visits.get_mut("enter_context_declaration").unwrap() += 1;
        }
        fn exit_context_declaration(&mut self, node: &ContextDeclaration) {
            *self.visits.get_mut("exit_context_declaration").unwrap() += 1;
        }
        fn enter_package_instantiation(&mut self, node: &PackageInstantiation) {
            *self.visits.get_mut("enter_package_instantiation").unwrap() += 1;
        }
        fn exit_package_instantiation(&mut self, node: &PackageInstantiation) {
            *self.visits.get_mut("exit_package_instantiation").unwrap() += 1;
        }
        fn enter_instantiation_list(&mut self, node: &InstantiationList) {
            *self.visits.get_mut("enter_instantiation_list").unwrap() += 1;
        }
        fn exit_instantiation_list(&mut self, node: &InstantiationList) {
            *self.visits.get_mut("exit_instantiation_list").unwrap() += 1;
        }
        fn enter_entity_aspect(&mut self, node: &EntityAspect) {
            *self.visits.get_mut("enter_entity_aspect").unwrap() += 1;
        }
        fn exit_entity_aspect(&mut self, node: &EntityAspect) {
            *self.visits.get_mut("exit_entity_aspect").unwrap() += 1;
        }
        fn enter_binding_indication(&mut self, node: &BindingIndication) {
            *self.visits.get_mut("enter_binding_indication").unwrap() += 1;
        }
        fn exit_binding_indication(&mut self, node: &BindingIndication) {
            *self.visits.get_mut("exit_binding_indication").unwrap() += 1;
        }
        fn enter_component_specification(&mut self, node: &ComponentSpecification) {
            *self
                .visits
                .get_mut("enter_component_specification")
                .unwrap() += 1;
        }
        fn exit_component_specification(&mut self, node: &ComponentSpecification) {
            *self.visits.get_mut("exit_component_specification").unwrap() += 1;
        }
        fn enter_v_unit_binding_indication(&mut self, node: &VUnitBindingIndication) {
            *self
                .visits
                .get_mut("enter_v_unit_binding_indication")
                .unwrap() += 1;
        }
        fn exit_v_unit_binding_indication(&mut self, node: &VUnitBindingIndication) {
            *self
                .visits
                .get_mut("exit_v_unit_binding_indication")
                .unwrap() += 1;
        }
        fn enter_configuration_specification(&mut self, node: &ConfigurationSpecification) {
            *self
                .visits
                .get_mut("enter_configuration_specification")
                .unwrap() += 1;
        }
        fn exit_configuration_specification(&mut self, node: &ConfigurationSpecification) {
            *self
                .visits
                .get_mut("exit_configuration_specification")
                .unwrap() += 1;
        }
        fn enter_configuration_declarative_item(&mut self, node: &ConfigurationDeclarativeItem) {
            *self
                .visits
                .get_mut("enter_configuration_declarative_item")
                .unwrap() += 1;
        }
        fn exit_configuration_declarative_item(&mut self, node: &ConfigurationDeclarativeItem) {
            *self
                .visits
                .get_mut("exit_configuration_declarative_item")
                .unwrap() += 1;
        }
        fn enter_component_configuration(&mut self, node: &ComponentConfiguration) {
            *self
                .visits
                .get_mut("enter_component_configuration")
                .unwrap() += 1;
        }
        fn exit_component_configuration(&mut self, node: &ComponentConfiguration) {
            *self.visits.get_mut("exit_component_configuration").unwrap() += 1;
        }
        fn enter_configuration_item(&mut self, node: &ConfigurationItem) {
            *self.visits.get_mut("enter_configuration_item").unwrap() += 1;
        }
        fn exit_configuration_item(&mut self, node: &ConfigurationItem) {
            *self.visits.get_mut("exit_configuration_item").unwrap() += 1;
        }
        fn enter_block_configuration(&mut self, node: &BlockConfiguration) {
            *self.visits.get_mut("enter_block_configuration").unwrap() += 1;
        }
        fn exit_block_configuration(&mut self, node: &BlockConfiguration) {
            *self.visits.get_mut("exit_block_configuration").unwrap() += 1;
        }
        fn enter_configuration_declaration(&mut self, node: &ConfigurationDeclaration) {
            *self
                .visits
                .get_mut("enter_configuration_declaration")
                .unwrap() += 1;
        }
        fn exit_configuration_declaration(&mut self, node: &ConfigurationDeclaration) {
            *self
                .visits
                .get_mut("exit_configuration_declaration")
                .unwrap() += 1;
        }
        fn enter_entity_declaration(&mut self, node: &EntityDeclaration) {
            *self.visits.get_mut("enter_entity_declaration").unwrap() += 1;
        }
        fn exit_entity_declaration(&mut self, node: &EntityDeclaration) {
            *self.visits.get_mut("exit_entity_declaration").unwrap() += 1;
        }
        fn enter_architecture_body(&mut self, node: &ArchitectureBody) {
            *self.visits.get_mut("enter_architecture_body").unwrap() += 1;
        }
        fn exit_architecture_body(&mut self, node: &ArchitectureBody) {
            *self.visits.get_mut("exit_architecture_body").unwrap() += 1;
        }
        fn enter_package_declaration(&mut self, node: &PackageDeclaration) {
            *self.visits.get_mut("enter_package_declaration").unwrap() += 1;
        }
        fn exit_package_declaration(&mut self, node: &PackageDeclaration) {
            *self.visits.get_mut("exit_package_declaration").unwrap() += 1;
        }
        fn enter_package_body(&mut self, node: &PackageBody) {
            *self.visits.get_mut("enter_package_body").unwrap() += 1;
        }
        fn exit_package_body(&mut self, node: &PackageBody) {
            *self.visits.get_mut("exit_package_body").unwrap() += 1;
        }
        fn enter_primary_unit(&mut self, node: &PrimaryUnit) {
            *self.visits.get_mut("enter_primary_unit").unwrap() += 1;
        }
        fn exit_primary_unit(&mut self, node: &PrimaryUnit) {
            *self.visits.get_mut("exit_primary_unit").unwrap() += 1;
        }
        fn enter_secondary_unit(&mut self, node: &SecondaryUnit) {
            *self.visits.get_mut("enter_secondary_unit").unwrap() += 1;
        }
        fn exit_secondary_unit(&mut self, node: &SecondaryUnit) {
            *self.visits.get_mut("exit_secondary_unit").unwrap() += 1;
        }
        fn enter_design_unit_entity_declaration(&mut self, node: &DesignUnit<EntityDeclaration>) {
            *self
                .visits
                .get_mut("enter_design_unit_entity_declaration")
                .unwrap() += 1;
        }
        fn exit_design_unit_entity_declaration(&mut self, node: &DesignUnit<EntityDeclaration>) {
            *self
                .visits
                .get_mut("exit_design_unit_entity_declaration")
                .unwrap() += 1;
        }
        fn enter_design_unit_package_instantiation(
            &mut self,
            node: &DesignUnit<PackageInstantiation>,
        ) {
            *self
                .visits
                .get_mut("enter_design_unit_package_instantiation")
                .unwrap() += 1;
        }
        fn exit_design_unit_package_instantiation(
            &mut self,
            node: &DesignUnit<PackageInstantiation>,
        ) {
            *self
                .visits
                .get_mut("exit_design_unit_package_instantiation")
                .unwrap() += 1;
        }
        fn enter_design_unit_configuration_declaration(
            &mut self,
            node: &DesignUnit<ConfigurationDeclaration>,
        ) {
            *self
                .visits
                .get_mut("enter_design_unit_configuration_declaration")
                .unwrap() += 1;
        }
        fn exit_design_unit_configuration_declaration(
            &mut self,
            node: &DesignUnit<ConfigurationDeclaration>,
        ) {
            *self
                .visits
                .get_mut("exit_design_unit_configuration_declaration")
                .unwrap() += 1;
        }
        fn enter_design_unit_package_body(&mut self, node: &DesignUnit<PackageBody>) {
            *self
                .visits
                .get_mut("enter_design_unit_package_body")
                .unwrap() += 1;
        }
        fn exit_design_unit_package_body(&mut self, node: &DesignUnit<PackageBody>) {
            *self
                .visits
                .get_mut("exit_design_unit_package_body")
                .unwrap() += 1;
        }
        fn enter_design_unit_architecture_body(&mut self, node: &DesignUnit<ArchitectureBody>) {
            *self
                .visits
                .get_mut("enter_design_unit_architecture_body")
                .unwrap() += 1;
        }
        fn exit_design_unit_architecture_body(&mut self, node: &DesignUnit<ArchitectureBody>) {
            *self
                .visits
                .get_mut("exit_design_unit_architecture_body")
                .unwrap() += 1;
        }
        fn enter_design_unit_package_declaration(&mut self, node: &DesignUnit<PackageDeclaration>) {
            *self
                .visits
                .get_mut("enter_design_unit_package_declaration")
                .unwrap() += 1;
        }
        fn exit_design_unit_package_declaration(&mut self, node: &DesignUnit<PackageDeclaration>) {
            *self
                .visits
                .get_mut("exit_design_unit_package_declaration")
                .unwrap() += 1;
        }
        fn enter_any_design_unit(&mut self, node: &AnyDesignUnit) {
            *self.visits.get_mut("enter_any_design_unit").unwrap() += 1;
        }
        fn exit_any_design_unit(&mut self, node: &AnyDesignUnit) {
            *self.visits.get_mut("exit_any_design_unit").unwrap() += 1;
        }
        fn enter_design_file(&mut self, node: &DesignFile) {
            *self.visits.get_mut("enter_design_file").unwrap() += 1;
        }
        fn exit_design_file(&mut self, node: &DesignFile) {
            *self.visits.get_mut("exit_design_file").unwrap() += 1;
        }
    }

    #[test]
    fn listen_to_design_file() {
        let mut test_visitor = TestVisitor::new();

        let mut ast_visitor = AstVisitor::new();
        ast_visitor.register(&mut test_visitor);

        #[allow(unused_mut)]
        let (_code, mut design_file) = parse_ok(
            "

package mypkg is
    generic(
        file file_gen : text; 
        pkg_gen : boolean;
        type gen_type;
        function gen_func(int : integer) return integer is <>;
        procedure gen_proc is def_proc
    );
    function myfunc(int : integer range 0 to 1) return integer;
    procedure myprocedure(constant i : integer; signal io : inout integer; variable o : out integer);
    type CAPACITY is range 0 to 1E5 units
        pF; -- picofarad
        nF = 1000 pF; -- nanofarad
        uF = 1000 nF; -- microfarad
        mF = 1000 uF; -- milifarad
        F = 1000 mF; -- farad
    end units CAPACITY;
end;

package mypkg_inst is new mypkg generic map (true);

context mycontext is
    library ieee;
    use ieee.numeric_std.all;
end;

context work.mycontext;
package body mypkg is
    
    function myfunc(int : integer range 0 to 1) return integer is
        variable retval : integer;
    begin
        retval := (int + 1) mod 2;
        return retval;
    end function myfunc;

    procedure myprocedure(constant i : integer; signal io : inout integer; signal o : out integer) is
    begin
        o <= i + io;
    end;

end;


entity mycomp is
    generic (
        N : integer := 2;
        package p is new work.p_template generic map (pkg_gen => N = 2)
    );
    port(i: in std_logic;
         o: out std_logic);
end entity mycomp;

architecture rtl of mycomp is
begin
    passthrough: i <= o;
end architecture rtl;

library ieee;
use ieee.std_logic_1164.all;
entity myent2 is
    generic(gen : boolean := false);
    port(i : in std_logic; o : out std_logic);
end entity;

architecture rtl of myent2 is

    type super_mytype is record
        rec_element : std_ulogic_vector;
        rec_element2 :  std_ulogic;
    end record;
    type super_ultra_mytype is record
        s : (rec_element resolved, rec_element2 resolved) super_mytype;
    end record;
    type mytype;
    subtype mytype is mytype(
        rec_element(3 downto 0)
    );
    type mytype_acc is access mytype;
    type enum is (ett, tva);
    type prot is protected
        impure function get return integer;
    end protected;
    type prot is protected body
        variable const : integer := 1+2;
        impure function get return integer is
        begin
            return const;
        end function;
    end protected body;
    type myarr is array(0 to 4) of integer;
    
    signal mysignal : mytype := (rec_element => std_ulogic_vector'(\"1111\") and 4x\"F\");
    signal inte : integer;
    
    shared variable myvariable : mytype;
    
    attribute myattr : string;
    attribute myattr of mysignal : signal is \"hello world\";

    component mycomp is
        port(i: in std_logic;
             o: out std_logic);
    end component mycomp;

    alias alias1 is << signal .tb.uut.o_n : std_logic >>;  -- hierarchical signal name
    --alias alias2 is << signal ^.^.a : std_logic >>;        -- signal a two levels above
    alias alias3 is << variable @lib.pack.v : bit >>;      -- variable in a package pack
    alias myfunc_a is myfunc [integer return integer];

    for all : mycomp use entity work.mycomp(rtl);

    file myfile : text open read_mode is \"temp.txt\";

begin
    assert true report \"assertion\" severity warning;
    conditional: o <= i when i else '0';
    with i select o <= '0' when '0', '1' when others;
    myprocedure(2, int, int);
    inte <= reject 5 ns inertial myfunc(to_integer(unsigned(mysignal.rec_element(0))));
    mysignal.rec_element <= std_logic_vector(to_unsigned(inte, mysignal.rec_element'length));
    myblock : block is 
    begin
        mycomp_i : mycomp
        port map (
            i => '0',
            o => open
        );
    end block;

    myproc: process(i) is
        variable var : std_logic;
        variable int : integer;
        variable mytype_acc_var : mytype_acc;
    begin
        report \"report\" severity warning;
        mytype_acc_var := new mytype;
        case gen is
            when true => var := '1';
            when false => var := '0';
        end case;
        o <= '1' when gen = true else '0' when gen = false else '0';
        var := '1' when gen = true else '0' when gen = false else '0';
        with gen select var := '1' when true, '0' when others;
        with gen select o <= '1' when true, '0' when others;
        if gen then
            o <= '1';
        elsif not gen then
            o <= '0';
        else
            o <= '1';
        end if;
        o <= var after 4 ns, '0' after 10 ns;
        cond: o <= i when i else '0';
        int := myfunc(2);
        myprocedure(2, int, int);

        wait for 3 ns;

        loop
            exit;
        end loop;

        while i = '0' loop
            next;
        end loop;

        for i in 0 to 1 loop
        end loop;

    end process;

    case_gen : case gen generate
        when alt1: true =>
                signal s : integer;
            begin 
                o <= '1';
        when other: others =>
            o <= '0';
    end generate;

    for_gen : for i in 0 to 3 generate
        o <= unaffected;
    end generate;

    if_gen : if gen generate
        o <= 'Z';
    end generate;

end;

library ieee;
configuration mycnf of myent2 is
    use ieee.numeric_std.all;
    for rtl
        for mycomp_i : mycomp use entity work.mycomp(rtl); use vunit myvunit; end for;
    end for;
end configuration mycnf;

",
        );
        design_file.visit(&mut ast_visitor);
        let mut missed = Vec::new();
        for (k, v) in test_visitor.visits() {
            if v == 0 {
                if !(k == "enter_port_clause" || k == "exit_port_clause") {
                    missed.push(k);
                }
            }
        }
        assert!(
            missed.len() == 0,
            format!(
                "Not all events were called, missed the following {} events: {}",
                missed.len(),
                missed.join(", ")
            )
        )
    }

}
